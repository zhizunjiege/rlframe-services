// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agent_2eproto;
namespace game {
namespace agent {
class AgentConfig;
struct AgentConfigDefaultTypeInternal;
extern AgentConfigDefaultTypeInternal _AgentConfig_default_instance_;
class AgentConfig_Hook;
struct AgentConfig_HookDefaultTypeInternal;
extern AgentConfig_HookDefaultTypeInternal _AgentConfig_Hook_default_instance_;
class AgentMode;
struct AgentModeDefaultTypeInternal;
extern AgentModeDefaultTypeInternal _AgentMode_default_instance_;
class ModelBuffer;
struct ModelBufferDefaultTypeInternal;
extern ModelBufferDefaultTypeInternal _ModelBuffer_default_instance_;
class ModelStatus;
struct ModelStatusDefaultTypeInternal;
extern ModelStatusDefaultTypeInternal _ModelStatus_default_instance_;
class ModelWeights;
struct ModelWeightsDefaultTypeInternal;
extern ModelWeightsDefaultTypeInternal _ModelWeights_default_instance_;
}  // namespace agent
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::agent::AgentConfig* Arena::CreateMaybeMessage<::game::agent::AgentConfig>(Arena*);
template<> ::game::agent::AgentConfig_Hook* Arena::CreateMaybeMessage<::game::agent::AgentConfig_Hook>(Arena*);
template<> ::game::agent::AgentMode* Arena::CreateMaybeMessage<::game::agent::AgentMode>(Arena*);
template<> ::game::agent::ModelBuffer* Arena::CreateMaybeMessage<::game::agent::ModelBuffer>(Arena*);
template<> ::game::agent::ModelStatus* Arena::CreateMaybeMessage<::game::agent::ModelStatus>(Arena*);
template<> ::game::agent::ModelWeights* Arena::CreateMaybeMessage<::game::agent::ModelWeights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace agent {

// ===================================================================

class AgentConfig_Hook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.AgentConfig.Hook) */ {
 public:
  inline AgentConfig_Hook() : AgentConfig_Hook(nullptr) {}
  ~AgentConfig_Hook() override;
  explicit constexpr AgentConfig_Hook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentConfig_Hook(const AgentConfig_Hook& from);
  AgentConfig_Hook(AgentConfig_Hook&& from) noexcept
    : AgentConfig_Hook() {
    *this = ::std::move(from);
  }

  inline AgentConfig_Hook& operator=(const AgentConfig_Hook& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfig_Hook& operator=(AgentConfig_Hook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentConfig_Hook& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentConfig_Hook* internal_default_instance() {
    return reinterpret_cast<const AgentConfig_Hook*>(
               &_AgentConfig_Hook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentConfig_Hook& a, AgentConfig_Hook& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfig_Hook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfig_Hook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentConfig_Hook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentConfig_Hook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentConfig_Hook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentConfig_Hook& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfig_Hook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.AgentConfig.Hook";
  }
  protected:
  explicit AgentConfig_Hook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArgsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string args = 2;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:game.agent.AgentConfig.Hook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class AgentConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.AgentConfig) */ {
 public:
  inline AgentConfig() : AgentConfig(nullptr) {}
  ~AgentConfig() override;
  explicit constexpr AgentConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentConfig(const AgentConfig& from);
  AgentConfig(AgentConfig&& from) noexcept
    : AgentConfig() {
    *this = ::std::move(from);
  }

  inline AgentConfig& operator=(const AgentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfig& operator=(AgentConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentConfig* internal_default_instance() {
    return reinterpret_cast<const AgentConfig*>(
               &_AgentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentConfig& a, AgentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.AgentConfig";
  }
  protected:
  explicit AgentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AgentConfig_Hook Hook;

  // accessors -------------------------------------------------------

  enum : int {
    kHooksFieldNumber = 7,
    kNameFieldNumber = 2,
    kHypersFieldNumber = 3,
    kSifuncFieldNumber = 4,
    kOafuncFieldNumber = 5,
    kRewfuncFieldNumber = 6,
    kTrainingFieldNumber = 1,
  };
  // repeated .game.agent.AgentConfig.Hook hooks = 7;
  int hooks_size() const;
  private:
  int _internal_hooks_size() const;
  public:
  void clear_hooks();
  ::game::agent::AgentConfig_Hook* mutable_hooks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::agent::AgentConfig_Hook >*
      mutable_hooks();
  private:
  const ::game::agent::AgentConfig_Hook& _internal_hooks(int index) const;
  ::game::agent::AgentConfig_Hook* _internal_add_hooks();
  public:
  const ::game::agent::AgentConfig_Hook& hooks(int index) const;
  ::game::agent::AgentConfig_Hook* add_hooks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::agent::AgentConfig_Hook >&
      hooks() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string hypers = 3;
  void clear_hypers();
  const std::string& hypers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hypers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hypers();
  PROTOBUF_NODISCARD std::string* release_hypers();
  void set_allocated_hypers(std::string* hypers);
  private:
  const std::string& _internal_hypers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hypers(const std::string& value);
  std::string* _internal_mutable_hypers();
  public:

  // string sifunc = 4;
  void clear_sifunc();
  const std::string& sifunc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sifunc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sifunc();
  PROTOBUF_NODISCARD std::string* release_sifunc();
  void set_allocated_sifunc(std::string* sifunc);
  private:
  const std::string& _internal_sifunc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sifunc(const std::string& value);
  std::string* _internal_mutable_sifunc();
  public:

  // string oafunc = 5;
  void clear_oafunc();
  const std::string& oafunc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oafunc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oafunc();
  PROTOBUF_NODISCARD std::string* release_oafunc();
  void set_allocated_oafunc(std::string* oafunc);
  private:
  const std::string& _internal_oafunc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oafunc(const std::string& value);
  std::string* _internal_mutable_oafunc();
  public:

  // string rewfunc = 6;
  void clear_rewfunc();
  const std::string& rewfunc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rewfunc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rewfunc();
  PROTOBUF_NODISCARD std::string* release_rewfunc();
  void set_allocated_rewfunc(std::string* rewfunc);
  private:
  const std::string& _internal_rewfunc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rewfunc(const std::string& value);
  std::string* _internal_mutable_rewfunc();
  public:

  // bool training = 1;
  void clear_training();
  bool training() const;
  void set_training(bool value);
  private:
  bool _internal_training() const;
  void _internal_set_training(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.agent.AgentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::agent::AgentConfig_Hook > hooks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hypers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sifunc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oafunc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rewfunc_;
  bool training_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class AgentMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.AgentMode) */ {
 public:
  inline AgentMode() : AgentMode(nullptr) {}
  ~AgentMode() override;
  explicit constexpr AgentMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentMode(const AgentMode& from);
  AgentMode(AgentMode&& from) noexcept
    : AgentMode() {
    *this = ::std::move(from);
  }

  inline AgentMode& operator=(const AgentMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentMode& operator=(AgentMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentMode* internal_default_instance() {
    return reinterpret_cast<const AgentMode*>(
               &_AgentMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgentMode& a, AgentMode& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.AgentMode";
  }
  protected:
  explicit AgentMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrainingFieldNumber = 1,
  };
  // bool training = 1;
  void clear_training();
  bool training() const;
  void set_training(bool value);
  private:
  bool _internal_training() const;
  void _internal_set_training(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.agent.AgentMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool training_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class ModelWeights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.ModelWeights) */ {
 public:
  inline ModelWeights() : ModelWeights(nullptr) {}
  ~ModelWeights() override;
  explicit constexpr ModelWeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelWeights(const ModelWeights& from);
  ModelWeights(ModelWeights&& from) noexcept
    : ModelWeights() {
    *this = ::std::move(from);
  }

  inline ModelWeights& operator=(const ModelWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelWeights& operator=(ModelWeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelWeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelWeights* internal_default_instance() {
    return reinterpret_cast<const ModelWeights*>(
               &_ModelWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelWeights& a, ModelWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelWeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelWeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelWeights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelWeights& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelWeights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.ModelWeights";
  }
  protected:
  explicit ModelWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
  };
  // bytes weights = 1;
  void clear_weights();
  const std::string& weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weights();
  PROTOBUF_NODISCARD std::string* release_weights();
  void set_allocated_weights(std::string* weights);
  private:
  const std::string& _internal_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weights(const std::string& value);
  std::string* _internal_mutable_weights();
  public:

  // @@protoc_insertion_point(class_scope:game.agent.ModelWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class ModelBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.ModelBuffer) */ {
 public:
  inline ModelBuffer() : ModelBuffer(nullptr) {}
  ~ModelBuffer() override;
  explicit constexpr ModelBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelBuffer(const ModelBuffer& from);
  ModelBuffer(ModelBuffer&& from) noexcept
    : ModelBuffer() {
    *this = ::std::move(from);
  }

  inline ModelBuffer& operator=(const ModelBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelBuffer& operator=(ModelBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelBuffer* internal_default_instance() {
    return reinterpret_cast<const ModelBuffer*>(
               &_ModelBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelBuffer& a, ModelBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelBuffer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelBuffer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelBuffer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.ModelBuffer";
  }
  protected:
  explicit ModelBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:game.agent.ModelBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class ModelStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.agent.ModelStatus) */ {
 public:
  inline ModelStatus() : ModelStatus(nullptr) {}
  ~ModelStatus() override;
  explicit constexpr ModelStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelStatus(const ModelStatus& from);
  ModelStatus(ModelStatus&& from) noexcept
    : ModelStatus() {
    *this = ::std::move(from);
  }

  inline ModelStatus& operator=(const ModelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelStatus& operator=(ModelStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelStatus* internal_default_instance() {
    return reinterpret_cast<const ModelStatus*>(
               &_ModelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModelStatus& a, ModelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.agent.ModelStatus";
  }
  protected:
  explicit ModelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:game.agent.ModelStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentConfig_Hook

// string name = 1;
inline void AgentConfig_Hook::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AgentConfig_Hook::name() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.Hook.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig_Hook::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.Hook.name)
}
inline std::string* AgentConfig_Hook::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.Hook.name)
  return _s;
}
inline const std::string& AgentConfig_Hook::_internal_name() const {
  return name_.Get();
}
inline void AgentConfig_Hook::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig_Hook::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig_Hook::release_name() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.Hook.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig_Hook::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.Hook.name)
}

// string args = 2;
inline void AgentConfig_Hook::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& AgentConfig_Hook::args() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.Hook.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig_Hook::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.Hook.args)
}
inline std::string* AgentConfig_Hook::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.Hook.args)
  return _s;
}
inline const std::string& AgentConfig_Hook::_internal_args() const {
  return args_.Get();
}
inline void AgentConfig_Hook::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig_Hook::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig_Hook::release_args() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.Hook.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig_Hook::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.Hook.args)
}

// -------------------------------------------------------------------

// AgentConfig

// bool training = 1;
inline void AgentConfig::clear_training() {
  training_ = false;
}
inline bool AgentConfig::_internal_training() const {
  return training_;
}
inline bool AgentConfig::training() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.training)
  return _internal_training();
}
inline void AgentConfig::_internal_set_training(bool value) {
  
  training_ = value;
}
inline void AgentConfig::set_training(bool value) {
  _internal_set_training(value);
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.training)
}

// string name = 2;
inline void AgentConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AgentConfig::name() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.name)
}
inline std::string* AgentConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.name)
  return _s;
}
inline const std::string& AgentConfig::_internal_name() const {
  return name_.Get();
}
inline void AgentConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig::release_name() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.name)
}

// string hypers = 3;
inline void AgentConfig::clear_hypers() {
  hypers_.ClearToEmpty();
}
inline const std::string& AgentConfig::hypers() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.hypers)
  return _internal_hypers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_hypers(ArgT0&& arg0, ArgT... args) {
 
 hypers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.hypers)
}
inline std::string* AgentConfig::mutable_hypers() {
  std::string* _s = _internal_mutable_hypers();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.hypers)
  return _s;
}
inline const std::string& AgentConfig::_internal_hypers() const {
  return hypers_.Get();
}
inline void AgentConfig::_internal_set_hypers(const std::string& value) {
  
  hypers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_hypers() {
  
  return hypers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig::release_hypers() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.hypers)
  return hypers_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig::set_allocated_hypers(std::string* hypers) {
  if (hypers != nullptr) {
    
  } else {
    
  }
  hypers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hypers,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hypers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hypers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.hypers)
}

// string sifunc = 4;
inline void AgentConfig::clear_sifunc() {
  sifunc_.ClearToEmpty();
}
inline const std::string& AgentConfig::sifunc() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.sifunc)
  return _internal_sifunc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_sifunc(ArgT0&& arg0, ArgT... args) {
 
 sifunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.sifunc)
}
inline std::string* AgentConfig::mutable_sifunc() {
  std::string* _s = _internal_mutable_sifunc();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.sifunc)
  return _s;
}
inline const std::string& AgentConfig::_internal_sifunc() const {
  return sifunc_.Get();
}
inline void AgentConfig::_internal_set_sifunc(const std::string& value) {
  
  sifunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_sifunc() {
  
  return sifunc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig::release_sifunc() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.sifunc)
  return sifunc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig::set_allocated_sifunc(std::string* sifunc) {
  if (sifunc != nullptr) {
    
  } else {
    
  }
  sifunc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sifunc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sifunc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sifunc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.sifunc)
}

// string oafunc = 5;
inline void AgentConfig::clear_oafunc() {
  oafunc_.ClearToEmpty();
}
inline const std::string& AgentConfig::oafunc() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.oafunc)
  return _internal_oafunc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_oafunc(ArgT0&& arg0, ArgT... args) {
 
 oafunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.oafunc)
}
inline std::string* AgentConfig::mutable_oafunc() {
  std::string* _s = _internal_mutable_oafunc();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.oafunc)
  return _s;
}
inline const std::string& AgentConfig::_internal_oafunc() const {
  return oafunc_.Get();
}
inline void AgentConfig::_internal_set_oafunc(const std::string& value) {
  
  oafunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_oafunc() {
  
  return oafunc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig::release_oafunc() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.oafunc)
  return oafunc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig::set_allocated_oafunc(std::string* oafunc) {
  if (oafunc != nullptr) {
    
  } else {
    
  }
  oafunc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oafunc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oafunc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oafunc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.oafunc)
}

// string rewfunc = 6;
inline void AgentConfig::clear_rewfunc() {
  rewfunc_.ClearToEmpty();
}
inline const std::string& AgentConfig::rewfunc() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.rewfunc)
  return _internal_rewfunc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_rewfunc(ArgT0&& arg0, ArgT... args) {
 
 rewfunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.AgentConfig.rewfunc)
}
inline std::string* AgentConfig::mutable_rewfunc() {
  std::string* _s = _internal_mutable_rewfunc();
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.rewfunc)
  return _s;
}
inline const std::string& AgentConfig::_internal_rewfunc() const {
  return rewfunc_.Get();
}
inline void AgentConfig::_internal_set_rewfunc(const std::string& value) {
  
  rewfunc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_rewfunc() {
  
  return rewfunc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentConfig::release_rewfunc() {
  // @@protoc_insertion_point(field_release:game.agent.AgentConfig.rewfunc)
  return rewfunc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentConfig::set_allocated_rewfunc(std::string* rewfunc) {
  if (rewfunc != nullptr) {
    
  } else {
    
  }
  rewfunc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rewfunc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rewfunc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rewfunc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.AgentConfig.rewfunc)
}

// repeated .game.agent.AgentConfig.Hook hooks = 7;
inline int AgentConfig::_internal_hooks_size() const {
  return hooks_.size();
}
inline int AgentConfig::hooks_size() const {
  return _internal_hooks_size();
}
inline void AgentConfig::clear_hooks() {
  hooks_.Clear();
}
inline ::game::agent::AgentConfig_Hook* AgentConfig::mutable_hooks(int index) {
  // @@protoc_insertion_point(field_mutable:game.agent.AgentConfig.hooks)
  return hooks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::agent::AgentConfig_Hook >*
AgentConfig::mutable_hooks() {
  // @@protoc_insertion_point(field_mutable_list:game.agent.AgentConfig.hooks)
  return &hooks_;
}
inline const ::game::agent::AgentConfig_Hook& AgentConfig::_internal_hooks(int index) const {
  return hooks_.Get(index);
}
inline const ::game::agent::AgentConfig_Hook& AgentConfig::hooks(int index) const {
  // @@protoc_insertion_point(field_get:game.agent.AgentConfig.hooks)
  return _internal_hooks(index);
}
inline ::game::agent::AgentConfig_Hook* AgentConfig::_internal_add_hooks() {
  return hooks_.Add();
}
inline ::game::agent::AgentConfig_Hook* AgentConfig::add_hooks() {
  ::game::agent::AgentConfig_Hook* _add = _internal_add_hooks();
  // @@protoc_insertion_point(field_add:game.agent.AgentConfig.hooks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::agent::AgentConfig_Hook >&
AgentConfig::hooks() const {
  // @@protoc_insertion_point(field_list:game.agent.AgentConfig.hooks)
  return hooks_;
}

// -------------------------------------------------------------------

// AgentMode

// bool training = 1;
inline void AgentMode::clear_training() {
  training_ = false;
}
inline bool AgentMode::_internal_training() const {
  return training_;
}
inline bool AgentMode::training() const {
  // @@protoc_insertion_point(field_get:game.agent.AgentMode.training)
  return _internal_training();
}
inline void AgentMode::_internal_set_training(bool value) {
  
  training_ = value;
}
inline void AgentMode::set_training(bool value) {
  _internal_set_training(value);
  // @@protoc_insertion_point(field_set:game.agent.AgentMode.training)
}

// -------------------------------------------------------------------

// ModelWeights

// bytes weights = 1;
inline void ModelWeights::clear_weights() {
  weights_.ClearToEmpty();
}
inline const std::string& ModelWeights::weights() const {
  // @@protoc_insertion_point(field_get:game.agent.ModelWeights.weights)
  return _internal_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelWeights::set_weights(ArgT0&& arg0, ArgT... args) {
 
 weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.ModelWeights.weights)
}
inline std::string* ModelWeights::mutable_weights() {
  std::string* _s = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:game.agent.ModelWeights.weights)
  return _s;
}
inline const std::string& ModelWeights::_internal_weights() const {
  return weights_.Get();
}
inline void ModelWeights::_internal_set_weights(const std::string& value) {
  
  weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelWeights::_internal_mutable_weights() {
  
  return weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelWeights::release_weights() {
  // @@protoc_insertion_point(field_release:game.agent.ModelWeights.weights)
  return weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelWeights::set_allocated_weights(std::string* weights) {
  if (weights != nullptr) {
    
  } else {
    
  }
  weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weights,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (weights_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    weights_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.ModelWeights.weights)
}

// -------------------------------------------------------------------

// ModelBuffer

// bytes buffer = 1;
inline void ModelBuffer::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& ModelBuffer::buffer() const {
  // @@protoc_insertion_point(field_get:game.agent.ModelBuffer.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelBuffer::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.ModelBuffer.buffer)
}
inline std::string* ModelBuffer::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:game.agent.ModelBuffer.buffer)
  return _s;
}
inline const std::string& ModelBuffer::_internal_buffer() const {
  return buffer_.Get();
}
inline void ModelBuffer::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelBuffer::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelBuffer::release_buffer() {
  // @@protoc_insertion_point(field_release:game.agent.ModelBuffer.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelBuffer::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buffer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.ModelBuffer.buffer)
}

// -------------------------------------------------------------------

// ModelStatus

// string status = 1;
inline void ModelStatus::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ModelStatus::status() const {
  // @@protoc_insertion_point(field_get:game.agent.ModelStatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelStatus::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.agent.ModelStatus.status)
}
inline std::string* ModelStatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:game.agent.ModelStatus.status)
  return _s;
}
inline const std::string& ModelStatus::_internal_status() const {
  return status_.Get();
}
inline void ModelStatus::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelStatus::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelStatus::release_status() {
  // @@protoc_insertion_point(field_release:game.agent.ModelStatus.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.agent.ModelStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agent_2eproto
