// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simenv.proto
#ifndef GRPC_simenv_2eproto__INCLUDED
#define GRPC_simenv_2eproto__INCLUDED

#include "simenv.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace simenv {

class Simenv final {
 public:
  static constexpr char const* service_full_name() {
    return "game.simenv.Simenv";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // reset simenv service state
    virtual ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    // query simenv service state
    virtual ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>> AsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    // get simenv configs
    virtual ::grpc::Status GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimenvConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>> AsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>>(AsyncGetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>> PrepareAsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>>(PrepareAsyncGetSimenvConfigRaw(context, request, cq));
    }
    // set simenv configs
    virtual ::grpc::Status SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetSimenvConfigRaw(context, request, cq));
    }
    // control simenv
    virtual ::grpc::Status SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSimControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSimControlRaw(context, request, cq));
    }
    // get simenv info
    virtual ::grpc::Status SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>> AsyncSimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>>(AsyncSimMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>> PrepareAsyncSimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>>(PrepareAsyncSimMonitorRaw(context, request, cq));
    }
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>> AsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // reset simenv service state
      virtual void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // query simenv service state
      virtual void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get simenv configs
      virtual void GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set simenv configs
      virtual void SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // control simenv
      virtual void SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get simenv info
      virtual void SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // any rpc call
      virtual void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>* AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimenvConfig>* PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>* AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::simenv::SimInfo>* PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>> AsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    ::grpc::Status GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimenvConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>> AsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>>(AsyncGetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>> PrepareAsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>>(PrepareAsyncGetSimenvConfigRaw(context, request, cq));
    }
    ::grpc::Status SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetSimenvConfigRaw(context, request, cq));
    }
    ::grpc::Status SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSimControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSimControlRaw(context, request, cq));
    }
    ::grpc::Status SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>> AsyncSimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>>(AsyncSimMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>> PrepareAsyncSimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>>(PrepareAsyncSimMonitorRaw(context, request, cq));
    }
    ::grpc::Status Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>> AsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)>) override;
      void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, std::function<void(::grpc::Status)>) override;
      void GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, std::function<void(::grpc::Status)>) override;
      void SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)>) override;
      void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>* AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>* PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>* AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>* PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CallData>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CallData>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ResetService_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSimenvConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSimenvConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SimControl_;
    const ::grpc::internal::RpcMethod rpcmethod_SimMonitor_;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // reset simenv service state
    virtual ::grpc::Status ResetService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response);
    // query simenv service state
    virtual ::grpc::Status QueryService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response);
    // get simenv configs
    virtual ::grpc::Status GetSimenvConfig(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response);
    // set simenv configs
    virtual ::grpc::Status SetSimenvConfig(::grpc::ServerContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response);
    // control simenv
    virtual ::grpc::Status SimControl(::grpc::ServerContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response);
    // get simenv info
    virtual ::grpc::Status SimMonitor(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response);
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::types::ServiceState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSimenvConfig(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::simenv::SimenvConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSimenvConfig(::grpc::ServerContext* context, ::game::simenv::SimenvConfig* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SimControl() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimControl(::grpc::ServerContext* context, ::game::simenv::SimCmd* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SimMonitor() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimMonitor(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::simenv::SimInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::game::types::CallData* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CallData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetService<WithAsyncMethod_QueryService<WithAsyncMethod_GetSimenvConfig<WithAsyncMethod_SetSimenvConfig<WithAsyncMethod_SimControl<WithAsyncMethod_SimMonitor<WithAsyncMethod_Call<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) { return this->ResetService(context, request, response); }));}
    void SetMessageAllocatorFor_ResetService(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::ServiceState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response) { return this->QueryService(context, request, response); }));}
    void SetMessageAllocatorFor_QueryService(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::types::ServiceState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::ServiceState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::simenv::SimenvConfig>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response) { return this->GetSimenvConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetSimenvConfig(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::simenv::SimenvConfig>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::simenv::SimenvConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::simenv::SimenvConfig, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response) { return this->SetSimenvConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetSimenvConfig(
        ::grpc::MessageAllocator< ::game::simenv::SimenvConfig, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::simenv::SimenvConfig, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SimControl() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::simenv::SimCmd, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response) { return this->SimControl(context, request, response); }));}
    void SetMessageAllocatorFor_SimControl(
        ::grpc::MessageAllocator< ::game::simenv::SimCmd, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::simenv::SimCmd, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimControl(
      ::grpc::CallbackServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SimMonitor() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::simenv::SimInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response) { return this->SimMonitor(context, request, response); }));}
    void SetMessageAllocatorFor_SimMonitor(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::simenv::SimInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::simenv::SimInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Call() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CallData, ::game::types::CallData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response) { return this->Call(context, request, response); }));}
    void SetMessageAllocatorFor_Call(
        ::grpc::MessageAllocator< ::game::types::CallData, ::game::types::CallData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CallData, ::game::types::CallData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ResetService<WithCallbackMethod_QueryService<WithCallbackMethod_GetSimenvConfig<WithCallbackMethod_SetSimenvConfig<WithCallbackMethod_SimControl<WithCallbackMethod_SimMonitor<WithCallbackMethod_Call<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SimControl() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SimMonitor() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSimenvConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSimenvConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SimControl() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SimMonitor() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimMonitor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetService(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryService(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSimenvConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSimenvConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SimControl() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SimControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SimMonitor() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SimMonitor(context, request, response); }));
    }
    ~WithRawCallbackMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Call() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Call(context, request, response); }));
    }
    ~WithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedResetService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::types::ServiceState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::types::ServiceState>* streamer) {
                       return this->StreamedQueryService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::types::ServiceState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::simenv::SimenvConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::simenv::SimenvConfig>* streamer) {
                       return this->StreamedGetSimenvConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimenvConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSimenvConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::simenv::SimenvConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::simenv::SimenvConfig, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::simenv::SimenvConfig, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetSimenvConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::simenv::SimenvConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSimenvConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::simenv::SimenvConfig,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SimControl() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::simenv::SimCmd, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::simenv::SimCmd, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSimControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::simenv::SimCmd* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::simenv::SimCmd,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SimMonitor() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::simenv::SimInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::simenv::SimInfo>* streamer) {
                       return this->StreamedSimMonitor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::simenv::SimInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimMonitor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::simenv::SimInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CallData, ::game::types::CallData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CallData, ::game::types::CallData>* streamer) {
                       return this->StreamedCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CallData,::game::types::CallData>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetSimenvConfig<WithStreamedUnaryMethod_SetSimenvConfig<WithStreamedUnaryMethod_SimControl<WithStreamedUnaryMethod_SimMonitor<WithStreamedUnaryMethod_Call<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetSimenvConfig<WithStreamedUnaryMethod_SetSimenvConfig<WithStreamedUnaryMethod_SimControl<WithStreamedUnaryMethod_SimMonitor<WithStreamedUnaryMethod_Call<Service > > > > > > > StreamedService;
};

}  // namespace simenv
}  // namespace game


#endif  // GRPC_simenv_2eproto__INCLUDED
