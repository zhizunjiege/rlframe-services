// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bff.proto

#include "bff.pb.h"
#include "bff.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace bff {

static const char* BFF_method_names[] = {
  "/game.bff.BFF/ResetServer",
  "/game.bff.BFF/RegisterService",
  "/game.bff.BFF/UnRegisterService",
  "/game.bff.BFF/GetServiceInfo",
  "/game.bff.BFF/SetServiceInfo",
  "/game.bff.BFF/ResetService",
  "/game.bff.BFF/QueryService",
  "/game.bff.BFF/GetSimenvConfig",
  "/game.bff.BFF/SetSimenvConfig",
  "/game.bff.BFF/SimControl",
  "/game.bff.BFF/SimMonitor",
  "/game.bff.BFF/GetAgentConfig",
  "/game.bff.BFF/SetAgentConfig",
  "/game.bff.BFF/GetAgentMode",
  "/game.bff.BFF/SetAgentMode",
  "/game.bff.BFF/GetModelWeights",
  "/game.bff.BFF/SetModelWeights",
  "/game.bff.BFF/GetModelBuffer",
  "/game.bff.BFF/SetModelBuffer",
  "/game.bff.BFF/GetModelStatus",
  "/game.bff.BFF/SetModelStatus",
  "/game.bff.BFF/Call",
};

std::unique_ptr< BFF::Stub> BFF::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BFF::Stub> stub(new BFF::Stub(channel, options));
  return stub;
}

BFF::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ResetServer_(BFF_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterService_(BFF_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnRegisterService_(BFF_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceInfo_(BFF_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServiceInfo_(BFF_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetService_(BFF_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryService_(BFF_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSimenvConfig_(BFF_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimenvConfig_(BFF_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimControl_(BFF_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimMonitor_(BFF_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentConfig_(BFF_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgentConfig_(BFF_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentMode_(BFF_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgentMode_(BFF_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelWeights_(BFF_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelWeights_(BFF_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelBuffer_(BFF_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelBuffer_(BFF_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelStatus_(BFF_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelStatus_(BFF_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Call_(BFF_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BFF::Stub::ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetServer_, context, request, response);
}

void BFF::Stub::async::ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetServer_, context, request, response, std::move(f));
}

void BFF::Stub::async::ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterService_, context, request, response);
}

void BFF::Stub::async::RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, std::move(f));
}

void BFF::Stub::async::RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ServiceInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnRegisterService_, context, request, response);
}

void BFF::Stub::async::UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnRegisterService_, context, request, response, std::move(f));
}

void BFF::Stub::async::UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnRegisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnRegisterService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnRegisterServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceInfoMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceInfo_, context, request, response);
}

void BFF::Stub::async::GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceInfo_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>* BFF::Stub::PrepareAsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::ServiceInfoMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>* BFF::Stub::AsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServiceInfo_, context, request, response);
}

void BFF::Stub::async::SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServiceInfo_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServiceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ServiceInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServiceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServiceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetService_, context, request, response);
}

void BFF::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, std::move(f));
}

void BFF::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceStateMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryService_, context, request, response);
}

void BFF::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, std::move(f));
}

void BFF::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>* BFF::Stub::PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::ServiceStateMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>* BFF::Stub::AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimenvConfigMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSimenvConfig_, context, request, response);
}

void BFF::Stub::async::GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimenvConfig_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimenvConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>* BFF::Stub::PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::SimenvConfigMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSimenvConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>* BFF::Stub::AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSimenvConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::SimenvConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSimenvConfig_, context, request, response);
}

void BFF::Stub::async::SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::SimenvConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimenvConfig_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimenvConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::SimenvConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSimenvConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSimenvConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::SimCmdMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SimControl_, context, request, response);
}

void BFF::Stub::async::SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::SimCmdMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimControl_, context, request, response, std::move(f));
}

void BFF::Stub::async::SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::SimCmdMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SimControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimInfoMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::SimInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SimMonitor_, context, request, response);
}

void BFF::Stub::async::SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::SimInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimMonitor_, context, request, response, std::move(f));
}

void BFF::Stub::async::SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimMonitor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>* BFF::Stub::PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::SimInfoMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SimMonitor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>* BFF::Stub::AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimMonitorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentConfigMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgentConfig_, context, request, response);
}

void BFF::Stub::async::GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfig_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>* BFF::Stub::PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::AgentConfigMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgentConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>* BFF::Stub::AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::AgentConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgentConfig_, context, request, response);
}

void BFF::Stub::async::SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::AgentConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentConfig_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::AgentConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgentConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgentConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentModeMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::AgentModeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgentMode_, context, request, response);
}

void BFF::Stub::async::GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::AgentModeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentMode_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>* BFF::Stub::PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::AgentModeMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgentMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>* BFF::Stub::AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::AgentModeMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgentMode_, context, request, response);
}

void BFF::Stub::async::SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::AgentModeMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentMode_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::AgentModeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgentMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgentModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelWeightsMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelWeights_, context, request, response);
}

void BFF::Stub::async::GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelWeights_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>* BFF::Stub::PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::ModelWeightsMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>* BFF::Stub::AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ModelWeightsMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelWeights_, context, request, response);
}

void BFF::Stub::async::SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ModelWeightsMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelWeights_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ModelWeightsMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelBufferMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelBuffer_, context, request, response);
}

void BFF::Stub::async::GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelBuffer_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>* BFF::Stub::PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::ModelBufferMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>* BFF::Stub::AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ModelBufferMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelBuffer_, context, request, response);
}

void BFF::Stub::async::SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ModelBufferMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelBuffer_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ModelBufferMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelStatusMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelStatus_, context, request, response);
}

void BFF::Stub::async::GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelStatus_, context, request, response, std::move(f));
}

void BFF::Stub::async::GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>* BFF::Stub::PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::ModelStatusMap, ::game::bff::ServiceIdList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>* BFF::Stub::AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::ModelStatusMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelStatus_, context, request, response);
}

void BFF::Stub::async::SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::ModelStatusMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelStatus_, context, request, response, std::move(f));
}

void BFF::Stub::async::SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::bff::ModelStatusMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* BFF::Stub::AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BFF::Stub::Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::game::bff::CallDataMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::bff::CallDataMap, ::game::bff::CallDataMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Call_, context, request, response);
}

void BFF::Stub::async::Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::bff::CallDataMap, ::game::bff::CallDataMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, std::move(f));
}

void BFF::Stub::async::Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>* BFF::Stub::PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::bff::CallDataMap, ::game::bff::CallDataMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Call_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>* BFF::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

BFF::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::types::CommonResponse* resp) {
               return service->ResetServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceInfoMap* req,
             ::game::types::CommonResponse* resp) {
               return service->RegisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::types::CommonResponse* resp) {
               return service->UnRegisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::ServiceInfoMap* resp) {
               return service->GetServiceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceInfoMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceInfoMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetServiceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::types::CommonResponse* resp) {
               return service->ResetService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::ServiceStateMap* resp) {
               return service->QueryService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::SimenvConfigMap* resp) {
               return service->GetSimenvConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::SimenvConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::SimenvConfigMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetSimenvConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::SimCmdMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::SimCmdMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SimControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::SimInfoMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::SimInfoMap* resp) {
               return service->SimMonitor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::AgentConfigMap* resp) {
               return service->GetAgentConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::AgentConfigMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::AgentConfigMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetAgentConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::AgentModeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::AgentModeMap* resp) {
               return service->GetAgentMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::AgentModeMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::AgentModeMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetAgentMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::ModelWeightsMap* resp) {
               return service->GetModelWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ModelWeightsMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ModelWeightsMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::ModelBufferMap* resp) {
               return service->GetModelBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ModelBufferMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ModelBufferMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ServiceIdList* req,
             ::game::bff::ModelStatusMap* resp) {
               return service->GetModelStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::ModelStatusMap, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::ModelStatusMap* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BFF_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BFF::Service, ::game::bff::CallDataMap, ::game::bff::CallDataMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BFF::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::bff::CallDataMap* req,
             ::game::bff::CallDataMap* resp) {
               return service->Call(ctx, req, resp);
             }, this)));
}

BFF::Service::~Service() {
}

::grpc::Status BFF::Service::ResetServer(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::RegisterService(::grpc::ServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::UnRegisterService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetServiceInfo(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetServiceInfo(::grpc::ServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::ResetService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::QueryService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetSimenvConfig(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetSimenvConfig(::grpc::ServerContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SimControl(::grpc::ServerContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SimMonitor(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetAgentConfig(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetAgentConfig(::grpc::ServerContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetAgentMode(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetAgentMode(::grpc::ServerContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetModelWeights(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetModelWeights(::grpc::ServerContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetModelBuffer(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetModelBuffer(::grpc::ServerContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::GetModelStatus(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::SetModelStatus(::grpc::ServerContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BFF::Service::Call(::grpc::ServerContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace bff

