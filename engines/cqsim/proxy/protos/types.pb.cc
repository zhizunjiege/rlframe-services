// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace game {
namespace types {
constexpr CommonRequest::CommonRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommonRequestDefaultTypeInternal {
  constexpr CommonRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonRequestDefaultTypeInternal() {}
  union {
    CommonRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonRequestDefaultTypeInternal _CommonRequest_default_instance_;
constexpr CommonResponse::CommonResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommonResponseDefaultTypeInternal {
  constexpr CommonResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonResponseDefaultTypeInternal() {}
  union {
    CommonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
constexpr CallData::CallData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dstr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dbin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CallDataDefaultTypeInternal {
  constexpr CallDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallDataDefaultTypeInternal() {}
  union {
    CallData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallDataDefaultTypeInternal _CallData_default_instance_;
constexpr ServiceState::ServiceState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct ServiceStateDefaultTypeInternal {
  constexpr ServiceStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStateDefaultTypeInternal() {}
  union {
    ServiceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStateDefaultTypeInternal _ServiceState_default_instance_;
constexpr SimParam_Array::SimParam_Array(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct SimParam_ArrayDefaultTypeInternal {
  constexpr SimParam_ArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimParam_ArrayDefaultTypeInternal() {}
  union {
    SimParam_Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimParam_ArrayDefaultTypeInternal _SimParam_Array_default_instance_;
constexpr SimParam_Struct_FieldsEntry_DoNotUse::SimParam_Struct_FieldsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal {
  constexpr SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimParam_Struct_FieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal _SimParam_Struct_FieldsEntry_DoNotUse_default_instance_;
constexpr SimParam_Struct::SimParam_Struct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SimParam_StructDefaultTypeInternal {
  constexpr SimParam_StructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimParam_StructDefaultTypeInternal() {}
  union {
    SimParam_Struct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimParam_StructDefaultTypeInternal _SimParam_Struct_default_instance_;
constexpr SimParam::SimParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SimParamDefaultTypeInternal {
  constexpr SimParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimParamDefaultTypeInternal() {}
  union {
    SimParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimParamDefaultTypeInternal _SimParam_default_instance_;
constexpr SimEntity_ParamsEntry_DoNotUse::SimEntity_ParamsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal {
  constexpr SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimEntity_ParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal _SimEntity_ParamsEntry_DoNotUse_default_instance_;
constexpr SimEntity::SimEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SimEntityDefaultTypeInternal {
  constexpr SimEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimEntityDefaultTypeInternal() {}
  union {
    SimEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimEntityDefaultTypeInternal _SimEntity_default_instance_;
constexpr SimModel::SimModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_(){}
struct SimModelDefaultTypeInternal {
  constexpr SimModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimModelDefaultTypeInternal() {}
  union {
    SimModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimModelDefaultTypeInternal _SimModel_default_instance_;
constexpr SimState_StatesEntry_DoNotUse::SimState_StatesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SimState_StatesEntry_DoNotUseDefaultTypeInternal {
  constexpr SimState_StatesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimState_StatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimState_StatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimState_StatesEntry_DoNotUseDefaultTypeInternal _SimState_StatesEntry_DoNotUse_default_instance_;
constexpr SimState::SimState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , reward_(0)
  , terminated_(false)
  , truncated_(false){}
struct SimStateDefaultTypeInternal {
  constexpr SimStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimStateDefaultTypeInternal() {}
  union {
    SimState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimStateDefaultTypeInternal _SimState_default_instance_;
constexpr SimAction_ActionsEntry_DoNotUse::SimAction_ActionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SimAction_ActionsEntry_DoNotUseDefaultTypeInternal {
  constexpr SimAction_ActionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimAction_ActionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimAction_ActionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimAction_ActionsEntry_DoNotUseDefaultTypeInternal _SimAction_ActionsEntry_DoNotUse_default_instance_;
constexpr SimAction::SimAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SimActionDefaultTypeInternal {
  constexpr SimActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimActionDefaultTypeInternal() {}
  union {
    SimAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimActionDefaultTypeInternal _SimAction_default_instance_;
}  // namespace types
}  // namespace game
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_types_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;

const uint32_t TableStruct_types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::CommonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::CallData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::CallData, name_),
  PROTOBUF_FIELD_OFFSET(::game::types::CallData, dstr_),
  PROTOBUF_FIELD_OFFSET(::game::types::CallData, dbin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::ServiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::ServiceState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Array, items_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam_Struct, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::types::SimParam, value_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimEntity, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimModel, entities_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState_StatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState_StatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimState_StatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState_StatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimState, states_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState, terminated_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState, truncated_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimState, reward_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction_ActionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction_ActionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction_ActionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction_ActionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::types::SimAction, actions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::types::CommonRequest)},
  { 6, -1, -1, sizeof(::game::types::CommonResponse)},
  { 12, -1, -1, sizeof(::game::types::CallData)},
  { 21, -1, -1, sizeof(::game::types::ServiceState)},
  { 28, -1, -1, sizeof(::game::types::SimParam_Array)},
  { 35, 43, -1, sizeof(::game::types::SimParam_Struct_FieldsEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::game::types::SimParam_Struct)},
  { 52, -1, -1, sizeof(::game::types::SimParam)},
  { 65, 73, -1, sizeof(::game::types::SimEntity_ParamsEntry_DoNotUse)},
  { 75, -1, -1, sizeof(::game::types::SimEntity)},
  { 82, -1, -1, sizeof(::game::types::SimModel)},
  { 89, 97, -1, sizeof(::game::types::SimState_StatesEntry_DoNotUse)},
  { 99, -1, -1, sizeof(::game::types::SimState)},
  { 109, 117, -1, sizeof(::game::types::SimAction_ActionsEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::game::types::SimAction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_CommonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_CommonResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_CallData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_ServiceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimParam_Array_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimParam_Struct_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimParam_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimEntity_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimState_StatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimAction_ActionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::types::_SimAction_default_instance_),
};

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\ngame.types\"\017\n\rCommonReque"
  "st\"\020\n\016CommonResponse\"4\n\010CallData\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004dstr\030\002 \001(\t\022\014\n\004dbin\030\003 \001(\014\"`\n\014Se"
  "rviceState\022-\n\005state\030\001 \001(\0162\036.game.types.S"
  "erviceState.State\"!\n\005State\022\014\n\010UNINITED\020\000"
  "\022\n\n\006INITED\020\001\"\361\002\n\010SimParam\022\021\n\007vdouble\030\001 \001"
  "(\001H\000\022\020\n\006vint32\030\002 \001(\005H\000\022\017\n\005vbool\030\003 \001(\010H\000\022"
  "\021\n\007vstring\030\004 \001(\tH\000\022,\n\006varray\030\005 \001(\0132\032.gam"
  "e.types.SimParam.ArrayH\000\022.\n\007vstruct\030\006 \001("
  "\0132\033.game.types.SimParam.StructH\000\032,\n\005Arra"
  "y\022#\n\005items\030\001 \003(\0132\024.game.types.SimParam\032\206"
  "\001\n\006Struct\0227\n\006fields\030\001 \003(\0132\'.game.types.S"
  "imParam.Struct.FieldsEntry\032C\n\013FieldsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.game.typ"
  "es.SimParam:\0028\001B\007\n\005value\"\203\001\n\tSimEntity\0221"
  "\n\006params\030\001 \003(\0132!.game.types.SimEntity.Pa"
  "ramsEntry\032C\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022#\n"
  "\005value\030\002 \001(\0132\024.game.types.SimParam:\0028\001\"3"
  "\n\010SimModel\022\'\n\010entities\030\001 \003(\0132\025.game.type"
  "s.SimEntity\"\270\001\n\010SimState\0220\n\006states\030\001 \003(\013"
  "2 .game.types.SimState.StatesEntry\022\022\n\nte"
  "rminated\030\002 \001(\010\022\021\n\ttruncated\030\003 \001(\010\022\016\n\006rew"
  "ard\030\004 \001(\001\032C\n\013StatesEntry\022\013\n\003key\030\001 \001(\t\022#\n"
  "\005value\030\002 \001(\0132\024.game.types.SimModel:\0028\001\"\206"
  "\001\n\tSimAction\0223\n\007actions\030\001 \003(\0132\".game.typ"
  "es.SimAction.ActionsEntry\032D\n\014ActionsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.game.typ"
  "es.SimModel:\0028\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto = {
  false, false, 1103, descriptor_table_protodef_types_2eproto, "types.proto", 
  &descriptor_table_types_2eproto_once, nullptr, 0, 15,
  schemas, file_default_instances, TableStruct_types_2eproto::offsets,
  file_level_metadata_types_2eproto, file_level_enum_descriptors_types_2eproto, file_level_service_descriptors_types_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_types_2eproto_getter() {
  return &descriptor_table_types_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_types_2eproto(&descriptor_table_types_2eproto);
namespace game {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}
bool ServiceState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServiceState_State ServiceState::UNINITED;
constexpr ServiceState_State ServiceState::INITED;
constexpr ServiceState_State ServiceState::State_MIN;
constexpr ServiceState_State ServiceState::State_MAX;
constexpr int ServiceState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CommonRequest::_Internal {
 public:
};

CommonRequest::CommonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.types.CommonRequest)
}
CommonRequest::CommonRequest(const CommonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.types.CommonRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CommonRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[0]);
}

// ===================================================================

class CommonResponse::_Internal {
 public:
};

CommonResponse::CommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.types.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.types.CommonResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CommonResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[1]);
}

// ===================================================================

class CallData::_Internal {
 public:
};

CallData::CallData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.CallData)
}
CallData::CallData(const CallData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  dstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dstr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstr().empty()) {
    dstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstr(), 
      GetArenaForAllocation());
  }
  dbin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dbin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dbin().empty()) {
    dbin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dbin(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.types.CallData)
}

inline void CallData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dstr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dbin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dbin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallData::~CallData() {
  // @@protoc_insertion_point(destructor:game.types.CallData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallData::ArenaDtor(void* object) {
  CallData* _this = reinterpret_cast< CallData* >(object);
  (void)_this;
}
void CallData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallData::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.CallData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  dstr_.ClearToEmpty();
  dbin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.types.CallData.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dstr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.types.CallData.dstr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes dbin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dbin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.CallData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.types.CallData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string dstr = 2;
  if (!this->_internal_dstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstr().data(), static_cast<int>(this->_internal_dstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.types.CallData.dstr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dstr(), target);
  }

  // bytes dbin = 3;
  if (!this->_internal_dbin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_dbin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.CallData)
  return target;
}

size_t CallData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.CallData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string dstr = 2;
  if (!this->_internal_dstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstr());
  }

  // bytes dbin = 3;
  if (!this->_internal_dbin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dbin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallData::GetClassData() const { return &_class_data_; }

void CallData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CallData *>(to)->MergeFrom(
      static_cast<const CallData &>(from));
}


void CallData::MergeFrom(const CallData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.CallData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_dstr().empty()) {
    _internal_set_dstr(from._internal_dstr());
  }
  if (!from._internal_dbin().empty()) {
    _internal_set_dbin(from._internal_dbin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallData::CopyFrom(const CallData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.CallData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallData::IsInitialized() const {
  return true;
}

void CallData::InternalSwap(CallData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dstr_, lhs_arena,
      &other->dstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dbin_, lhs_arena,
      &other->dbin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CallData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[2]);
}

// ===================================================================

class ServiceState::_Internal {
 public:
};

ServiceState::ServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.ServiceState)
}
ServiceState::ServiceState(const ServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:game.types.ServiceState)
}

inline void ServiceState::SharedCtor() {
state_ = 0;
}

ServiceState::~ServiceState() {
  // @@protoc_insertion_point(destructor:game.types.ServiceState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServiceState::ArenaDtor(void* object) {
  ServiceState* _this = reinterpret_cast< ServiceState* >(object);
  (void)_this;
}
void ServiceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.ServiceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.types.ServiceState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::game::types::ServiceState_State>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.ServiceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.types.ServiceState.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.ServiceState)
  return target;
}

size_t ServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.ServiceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.types.ServiceState.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceState::GetClassData() const { return &_class_data_; }

void ServiceState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceState *>(to)->MergeFrom(
      static_cast<const ServiceState &>(from));
}


void ServiceState::MergeFrom(const ServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.ServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceState::CopyFrom(const ServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.ServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceState::IsInitialized() const {
  return true;
}

void ServiceState::InternalSwap(ServiceState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[3]);
}

// ===================================================================

class SimParam_Array::_Internal {
 public:
};

SimParam_Array::SimParam_Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimParam.Array)
}
SimParam_Array::SimParam_Array(const SimParam_Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.types.SimParam.Array)
}

inline void SimParam_Array::SharedCtor() {
}

SimParam_Array::~SimParam_Array() {
  // @@protoc_insertion_point(destructor:game.types.SimParam.Array)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimParam_Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimParam_Array::ArenaDtor(void* object) {
  SimParam_Array* _this = reinterpret_cast< SimParam_Array* >(object);
  (void)_this;
}
void SimParam_Array::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimParam_Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimParam_Array::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimParam.Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimParam_Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.types.SimParam items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimParam_Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimParam.Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.types.SimParam items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimParam.Array)
  return target;
}

size_t SimParam_Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimParam.Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.types.SimParam items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimParam_Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimParam_Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimParam_Array::GetClassData() const { return &_class_data_; }

void SimParam_Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimParam_Array *>(to)->MergeFrom(
      static_cast<const SimParam_Array &>(from));
}


void SimParam_Array::MergeFrom(const SimParam_Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimParam.Array)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimParam_Array::CopyFrom(const SimParam_Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimParam.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimParam_Array::IsInitialized() const {
  return true;
}

void SimParam_Array::InternalSwap(SimParam_Array* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimParam_Array::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[4]);
}

// ===================================================================

SimParam_Struct_FieldsEntry_DoNotUse::SimParam_Struct_FieldsEntry_DoNotUse() {}
SimParam_Struct_FieldsEntry_DoNotUse::SimParam_Struct_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimParam_Struct_FieldsEntry_DoNotUse::MergeFrom(const SimParam_Struct_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimParam_Struct_FieldsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[5]);
}

// ===================================================================

class SimParam_Struct::_Internal {
 public:
};

SimParam_Struct::SimParam_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimParam.Struct)
}
SimParam_Struct::SimParam_Struct(const SimParam_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  // @@protoc_insertion_point(copy_constructor:game.types.SimParam.Struct)
}

inline void SimParam_Struct::SharedCtor() {
}

SimParam_Struct::~SimParam_Struct() {
  // @@protoc_insertion_point(destructor:game.types.SimParam.Struct)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimParam_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimParam_Struct::ArenaDtor(void* object) {
  SimParam_Struct* _this = reinterpret_cast< SimParam_Struct* >(object);
  (void)_this;
  _this->fields_. ~MapField();
}
inline void SimParam_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SimParam_Struct::ArenaDtor);
  }
}
void SimParam_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimParam_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimParam.Struct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimParam_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .game.types.SimParam> fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimParam_Struct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimParam.Struct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .game.types.SimParam> fields = 1;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "game.types.SimParam.Struct.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimParam_Struct_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = SimParam_Struct_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimParam.Struct)
  return target;
}

size_t SimParam_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimParam.Struct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .game.types.SimParam> fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += SimParam_Struct_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimParam_Struct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimParam_Struct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimParam_Struct::GetClassData() const { return &_class_data_; }

void SimParam_Struct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimParam_Struct *>(to)->MergeFrom(
      static_cast<const SimParam_Struct &>(from));
}


void SimParam_Struct::MergeFrom(const SimParam_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimParam.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimParam_Struct::CopyFrom(const SimParam_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimParam.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimParam_Struct::IsInitialized() const {
  return true;
}

void SimParam_Struct::InternalSwap(SimParam_Struct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimParam_Struct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[6]);
}

// ===================================================================

class SimParam::_Internal {
 public:
  static const ::game::types::SimParam_Array& varray(const SimParam* msg);
  static const ::game::types::SimParam_Struct& vstruct(const SimParam* msg);
};

const ::game::types::SimParam_Array&
SimParam::_Internal::varray(const SimParam* msg) {
  return *msg->value_.varray_;
}
const ::game::types::SimParam_Struct&
SimParam::_Internal::vstruct(const SimParam* msg) {
  return *msg->value_.vstruct_;
}
void SimParam::set_allocated_varray(::game::types::SimParam_Array* varray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (varray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::game::types::SimParam_Array>::GetOwningArena(varray);
    if (message_arena != submessage_arena) {
      varray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varray, submessage_arena);
    }
    set_has_varray();
    value_.varray_ = varray;
  }
  // @@protoc_insertion_point(field_set_allocated:game.types.SimParam.varray)
}
void SimParam::set_allocated_vstruct(::game::types::SimParam_Struct* vstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (vstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::game::types::SimParam_Struct>::GetOwningArena(vstruct);
    if (message_arena != submessage_arena) {
      vstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vstruct, submessage_arena);
    }
    set_has_vstruct();
    value_.vstruct_ = vstruct;
  }
  // @@protoc_insertion_point(field_set_allocated:game.types.SimParam.vstruct)
}
SimParam::SimParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimParam)
}
SimParam::SimParam(const SimParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kVdouble: {
      _internal_set_vdouble(from._internal_vdouble());
      break;
    }
    case kVint32: {
      _internal_set_vint32(from._internal_vint32());
      break;
    }
    case kVbool: {
      _internal_set_vbool(from._internal_vbool());
      break;
    }
    case kVstring: {
      _internal_set_vstring(from._internal_vstring());
      break;
    }
    case kVarray: {
      _internal_mutable_varray()->::game::types::SimParam_Array::MergeFrom(from._internal_varray());
      break;
    }
    case kVstruct: {
      _internal_mutable_vstruct()->::game::types::SimParam_Struct::MergeFrom(from._internal_vstruct());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.types.SimParam)
}

inline void SimParam::SharedCtor() {
clear_has_value();
}

SimParam::~SimParam() {
  // @@protoc_insertion_point(destructor:game.types.SimParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void SimParam::ArenaDtor(void* object) {
  SimParam* _this = reinterpret_cast< SimParam* >(object);
  (void)_this;
}
void SimParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimParam::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:game.types.SimParam)
  switch (value_case()) {
    case kVdouble: {
      // No need to clear
      break;
    }
    case kVint32: {
      // No need to clear
      break;
    }
    case kVbool: {
      // No need to clear
      break;
    }
    case kVstring: {
      value_.vstring_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVarray: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.varray_;
      }
      break;
    }
    case kVstruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.vstruct_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SimParam::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double vdouble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_vdouble(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 vint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_vint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool vbool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_vbool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vstring = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_vstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.types.SimParam.vstring"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.types.SimParam.Array varray = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_varray(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.types.SimParam.Struct vstruct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double vdouble = 1;
  if (_internal_has_vdouble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_vdouble(), target);
  }

  // int32 vint32 = 2;
  if (_internal_has_vint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vint32(), target);
  }

  // bool vbool = 3;
  if (_internal_has_vbool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vbool(), target);
  }

  // string vstring = 4;
  if (_internal_has_vstring()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vstring().data(), static_cast<int>(this->_internal_vstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.types.SimParam.vstring");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vstring(), target);
  }

  // .game.types.SimParam.Array varray = 5;
  if (_internal_has_varray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::varray(this), target, stream);
  }

  // .game.types.SimParam.Struct vstruct = 6;
  if (_internal_has_vstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimParam)
  return target;
}

size_t SimParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // double vdouble = 1;
    case kVdouble: {
      total_size += 1 + 8;
      break;
    }
    // int32 vint32 = 2;
    case kVint32: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vint32());
      break;
    }
    // bool vbool = 3;
    case kVbool: {
      total_size += 1 + 1;
      break;
    }
    // string vstring = 4;
    case kVstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vstring());
      break;
    }
    // .game.types.SimParam.Array varray = 5;
    case kVarray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.varray_);
      break;
    }
    // .game.types.SimParam.Struct vstruct = 6;
    case kVstruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.vstruct_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimParam::GetClassData() const { return &_class_data_; }

void SimParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimParam *>(to)->MergeFrom(
      static_cast<const SimParam &>(from));
}


void SimParam::MergeFrom(const SimParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kVdouble: {
      _internal_set_vdouble(from._internal_vdouble());
      break;
    }
    case kVint32: {
      _internal_set_vint32(from._internal_vint32());
      break;
    }
    case kVbool: {
      _internal_set_vbool(from._internal_vbool());
      break;
    }
    case kVstring: {
      _internal_set_vstring(from._internal_vstring());
      break;
    }
    case kVarray: {
      _internal_mutable_varray()->::game::types::SimParam_Array::MergeFrom(from._internal_varray());
      break;
    }
    case kVstruct: {
      _internal_mutable_vstruct()->::game::types::SimParam_Struct::MergeFrom(from._internal_vstruct());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimParam::CopyFrom(const SimParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimParam::IsInitialized() const {
  return true;
}

void SimParam::InternalSwap(SimParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[7]);
}

// ===================================================================

SimEntity_ParamsEntry_DoNotUse::SimEntity_ParamsEntry_DoNotUse() {}
SimEntity_ParamsEntry_DoNotUse::SimEntity_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimEntity_ParamsEntry_DoNotUse::MergeFrom(const SimEntity_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimEntity_ParamsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[8]);
}

// ===================================================================

class SimEntity::_Internal {
 public:
};

SimEntity::SimEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimEntity)
}
SimEntity::SimEntity(const SimEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  // @@protoc_insertion_point(copy_constructor:game.types.SimEntity)
}

inline void SimEntity::SharedCtor() {
}

SimEntity::~SimEntity() {
  // @@protoc_insertion_point(destructor:game.types.SimEntity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimEntity::ArenaDtor(void* object) {
  SimEntity* _this = reinterpret_cast< SimEntity* >(object);
  (void)_this;
  _this->params_. ~MapField();
}
inline void SimEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SimEntity::ArenaDtor);
  }
}
void SimEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .game.types.SimParam> params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .game.types.SimParam> params = 1;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "game.types.SimEntity.ParamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimEntity_ParamsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = SimEntity_ParamsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimEntity)
  return target;
}

size_t SimEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .game.types.SimParam> params = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += SimEntity_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimEntity::GetClassData() const { return &_class_data_; }

void SimEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimEntity *>(to)->MergeFrom(
      static_cast<const SimEntity &>(from));
}


void SimEntity::MergeFrom(const SimEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimEntity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimEntity::CopyFrom(const SimEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEntity::IsInitialized() const {
  return true;
}

void SimEntity::InternalSwap(SimEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[9]);
}

// ===================================================================

class SimModel::_Internal {
 public:
};

SimModel::SimModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimModel)
}
SimModel::SimModel(const SimModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.types.SimModel)
}

inline void SimModel::SharedCtor() {
}

SimModel::~SimModel() {
  // @@protoc_insertion_point(destructor:game.types.SimModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimModel::ArenaDtor(void* object) {
  SimModel* _this = reinterpret_cast< SimModel* >(object);
  (void)_this;
}
void SimModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimModel::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.types.SimEntity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.types.SimEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimModel)
  return target;
}

size_t SimModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.types.SimEntity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimModel::GetClassData() const { return &_class_data_; }

void SimModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimModel *>(to)->MergeFrom(
      static_cast<const SimModel &>(from));
}


void SimModel::MergeFrom(const SimModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimModel::CopyFrom(const SimModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimModel::IsInitialized() const {
  return true;
}

void SimModel::InternalSwap(SimModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[10]);
}

// ===================================================================

SimState_StatesEntry_DoNotUse::SimState_StatesEntry_DoNotUse() {}
SimState_StatesEntry_DoNotUse::SimState_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimState_StatesEntry_DoNotUse::MergeFrom(const SimState_StatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimState_StatesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[11]);
}

// ===================================================================

class SimState::_Internal {
 public:
};

SimState::SimState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimState)
}
SimState::SimState(const SimState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  states_.MergeFrom(from.states_);
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&truncated_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(truncated_));
  // @@protoc_insertion_point(copy_constructor:game.types.SimState)
}

inline void SimState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truncated_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(truncated_));
}

SimState::~SimState() {
  // @@protoc_insertion_point(destructor:game.types.SimState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimState::ArenaDtor(void* object) {
  SimState* _this = reinterpret_cast< SimState* >(object);
  (void)_this;
  _this->states_. ~MapField();
}
inline void SimState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SimState::ArenaDtor);
  }
}
void SimState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimState::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truncated_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(truncated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .game.types.SimModel> states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool terminated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          terminated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool truncated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          truncated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .game.types.SimModel> states = 1;
  if (!this->_internal_states().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "game.types.SimState.StatesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_states().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimState_StatesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it) {
        target = SimState_StatesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool terminated = 2;
  if (this->_internal_terminated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_terminated(), target);
  }

  // bool truncated = 3;
  if (this->_internal_truncated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_truncated(), target);
  }

  // double reward = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimState)
  return target;
}

size_t SimState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .game.types.SimModel> states = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
      it = this->_internal_states().begin();
      it != this->_internal_states().end(); ++it) {
    total_size += SimState_StatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double reward = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    total_size += 1 + 8;
  }

  // bool terminated = 2;
  if (this->_internal_terminated() != 0) {
    total_size += 1 + 1;
  }

  // bool truncated = 3;
  if (this->_internal_truncated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimState::GetClassData() const { return &_class_data_; }

void SimState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimState *>(to)->MergeFrom(
      static_cast<const SimState &>(from));
}


void SimState::MergeFrom(const SimState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = from._internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from._internal_terminated() != 0) {
    _internal_set_terminated(from._internal_terminated());
  }
  if (from._internal_truncated() != 0) {
    _internal_set_truncated(from._internal_truncated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimState::CopyFrom(const SimState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimState::IsInitialized() const {
  return true;
}

void SimState::InternalSwap(SimState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimState, truncated_)
      + sizeof(SimState::truncated_)
      - PROTOBUF_FIELD_OFFSET(SimState, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[12]);
}

// ===================================================================

SimAction_ActionsEntry_DoNotUse::SimAction_ActionsEntry_DoNotUse() {}
SimAction_ActionsEntry_DoNotUse::SimAction_ActionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimAction_ActionsEntry_DoNotUse::MergeFrom(const SimAction_ActionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimAction_ActionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[13]);
}

// ===================================================================

class SimAction::_Internal {
 public:
};

SimAction::SimAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.types.SimAction)
}
SimAction::SimAction(const SimAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actions_.MergeFrom(from.actions_);
  // @@protoc_insertion_point(copy_constructor:game.types.SimAction)
}

inline void SimAction::SharedCtor() {
}

SimAction::~SimAction() {
  // @@protoc_insertion_point(destructor:game.types.SimAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimAction::ArenaDtor(void* object) {
  SimAction* _this = reinterpret_cast< SimAction* >(object);
  (void)_this;
  _this->actions_. ~MapField();
}
inline void SimAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SimAction::ArenaDtor);
  }
}
void SimAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimAction::Clear() {
// @@protoc_insertion_point(message_clear_start:game.types.SimAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .game.types.SimModel> actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&actions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.types.SimAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .game.types.SimModel> actions = 1;
  if (!this->_internal_actions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "game.types.SimAction.ActionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_actions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_actions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
          it = this->_internal_actions().begin();
          it != this->_internal_actions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimAction_ActionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
          it = this->_internal_actions().begin();
          it != this->_internal_actions().end(); ++it) {
        target = SimAction_ActionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.types.SimAction)
  return target;
}

size_t SimAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.types.SimAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .game.types.SimModel> actions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >::const_iterator
      it = this->_internal_actions().begin();
      it != this->_internal_actions().end(); ++it) {
    total_size += SimAction_ActionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimAction::GetClassData() const { return &_class_data_; }

void SimAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimAction *>(to)->MergeFrom(
      static_cast<const SimAction &>(from));
}


void SimAction::MergeFrom(const SimAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.types.SimAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimAction::CopyFrom(const SimAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.types.SimAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimAction::IsInitialized() const {
  return true;
}

void SimAction::InternalSwap(SimAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2eproto_getter, &descriptor_table_types_2eproto_once,
      file_level_metadata_types_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::types::CommonRequest* Arena::CreateMaybeMessage< ::game::types::CommonRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::CommonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::CommonResponse* Arena::CreateMaybeMessage< ::game::types::CommonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::CommonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::CallData* Arena::CreateMaybeMessage< ::game::types::CallData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::CallData >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::ServiceState* Arena::CreateMaybeMessage< ::game::types::ServiceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::ServiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimParam_Array* Arena::CreateMaybeMessage< ::game::types::SimParam_Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimParam_Array >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimParam_Struct_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::game::types::SimParam_Struct_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimParam_Struct_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimParam_Struct* Arena::CreateMaybeMessage< ::game::types::SimParam_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimParam_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimParam* Arena::CreateMaybeMessage< ::game::types::SimParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimParam >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimEntity_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::game::types::SimEntity_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimEntity_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimEntity* Arena::CreateMaybeMessage< ::game::types::SimEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimModel* Arena::CreateMaybeMessage< ::game::types::SimModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimModel >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimState_StatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::game::types::SimState_StatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimState_StatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimState* Arena::CreateMaybeMessage< ::game::types::SimState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimState >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimAction_ActionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::game::types::SimAction_ActionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimAction_ActionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::types::SimAction* Arena::CreateMaybeMessage< ::game::types::SimAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::types::SimAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
