// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent.proto

#include "agent.pb.h"
#include "agent.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace agent {

static const char* Agent_method_names[] = {
  "/game.agent.Agent/ResetService",
  "/game.agent.Agent/QueryService",
  "/game.agent.Agent/GetAgentConfig",
  "/game.agent.Agent/SetAgentConfig",
  "/game.agent.Agent/GetAgentMode",
  "/game.agent.Agent/SetAgentMode",
  "/game.agent.Agent/GetModelWeights",
  "/game.agent.Agent/SetModelWeights",
  "/game.agent.Agent/GetModelBuffer",
  "/game.agent.Agent/SetModelBuffer",
  "/game.agent.Agent/GetModelStatus",
  "/game.agent.Agent/SetModelStatus",
  "/game.agent.Agent/GetAction",
  "/game.agent.Agent/Call",
};

std::unique_ptr< Agent::Stub> Agent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Agent::Stub> stub(new Agent::Stub(channel, options));
  return stub;
}

Agent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ResetService_(Agent_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryService_(Agent_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentConfig_(Agent_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgentConfig_(Agent_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentMode_(Agent_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgentMode_(Agent_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelWeights_(Agent_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelWeights_(Agent_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelBuffer_(Agent_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelBuffer_(Agent_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelStatus_(Agent_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModelStatus_(Agent_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAction_(Agent_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Call_(Agent_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Agent::Stub::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetService_, context, request, response);
}

void Agent::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, std::move(f));
}

void Agent::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryService_, context, request, response);
}

void Agent::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, std::move(f));
}

void Agent::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* Agent::Stub::PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::ServiceState, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* Agent::Stub::AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentConfig* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::agent::AgentConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgentConfig_, context, request, response);
}

void Agent::Stub::async::GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::agent::AgentConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfig_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>* Agent::Stub::PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::agent::AgentConfig, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgentConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>* Agent::Stub::AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::agent::AgentConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgentConfig_, context, request, response);
}

void Agent::Stub::async::SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::agent::AgentConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentConfig_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::agent::AgentConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgentConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgentConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentMode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::agent::AgentMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgentMode_, context, request, response);
}

void Agent::Stub::async::GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::agent::AgentMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentMode_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>* Agent::Stub::PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::agent::AgentMode, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgentMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>* Agent::Stub::AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::agent::AgentMode, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgentMode_, context, request, response);
}

void Agent::Stub::async::SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::agent::AgentMode, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentMode_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgentMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::agent::AgentMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgentMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgentModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelWeights* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelWeights, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelWeights_, context, request, response);
}

void Agent::Stub::async::GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelWeights, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelWeights_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>* Agent::Stub::PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::agent::ModelWeights, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>* Agent::Stub::AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::agent::ModelWeights, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelWeights_, context, request, response);
}

void Agent::Stub::async::SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::agent::ModelWeights, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelWeights_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::agent::ModelWeights, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelBuffer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelBuffer_, context, request, response);
}

void Agent::Stub::async::GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelBuffer_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>* Agent::Stub::PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::agent::ModelBuffer, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>* Agent::Stub::AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::agent::ModelBuffer, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelBuffer_, context, request, response);
}

void Agent::Stub::async::SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::agent::ModelBuffer, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelBuffer_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::agent::ModelBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelStatus_, context, request, response);
}

void Agent::Stub::async::GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::agent::ModelStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelStatus_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>* Agent::Stub::PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::agent::ModelStatus, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>* Agent::Stub::AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::agent::ModelStatus, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModelStatus_, context, request, response);
}

void Agent::Stub::async::SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::agent::ModelStatus, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelStatus_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModelStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::agent::ModelStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModelStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Agent::Stub::AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModelStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::game::types::SimState, ::game::types::SimAction>* Agent::Stub::GetActionRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::game::types::SimState, ::game::types::SimAction>::Create(channel_.get(), rpcmethod_GetAction_, context);
}

void Agent::Stub::async::GetAction(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::types::SimState,::game::types::SimAction>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::game::types::SimState,::game::types::SimAction>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAction_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>* Agent::Stub::AsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::game::types::SimState, ::game::types::SimAction>::Create(channel_.get(), cq, rpcmethod_GetAction_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>* Agent::Stub::PrepareAsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::game::types::SimState, ::game::types::SimAction>::Create(channel_.get(), cq, rpcmethod_GetAction_, context, false, nullptr);
}

::grpc::Status Agent::Stub::Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Call_, context, request, response);
}

void Agent::Stub::async::Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, std::move(f));
}

void Agent::Stub::async::Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CallData>* Agent::Stub::PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Call_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CallData>* Agent::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

Agent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::types::CommonResponse* resp) {
               return service->ResetService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::types::ServiceState* resp) {
               return service->QueryService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::agent::AgentConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::agent::AgentConfig* resp) {
               return service->GetAgentConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::agent::AgentConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::agent::AgentConfig* req,
             ::game::types::CommonResponse* resp) {
               return service->SetAgentConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::agent::AgentMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::agent::AgentMode* resp) {
               return service->GetAgentMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::agent::AgentMode, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::agent::AgentMode* req,
             ::game::types::CommonResponse* resp) {
               return service->SetAgentMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::agent::ModelWeights, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::agent::ModelWeights* resp) {
               return service->GetModelWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::agent::ModelWeights, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::agent::ModelWeights* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::agent::ModelBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::agent::ModelBuffer* resp) {
               return service->GetModelBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::agent::ModelBuffer, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::agent::ModelBuffer* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CommonRequest, ::game::agent::ModelStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::agent::ModelStatus* resp) {
               return service->GetModelStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::agent::ModelStatus, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::agent::ModelStatus* req,
             ::game::types::CommonResponse* resp) {
               return service->SetModelStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[12],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Agent::Service, ::game::types::SimState, ::game::types::SimAction>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::game::types::SimAction,
             ::game::types::SimState>* stream) {
               return service->GetAction(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CallData* req,
             ::game::types::CallData* resp) {
               return service->Call(ctx, req, resp);
             }, this)));
}

Agent::Service::~Service() {
}

::grpc::Status Agent::Service::ResetService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::QueryService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAgentConfig(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetAgentConfig(::grpc::ServerContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAgentMode(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetAgentMode(::grpc::ServerContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetModelWeights(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetModelWeights(::grpc::ServerContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetModelBuffer(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetModelBuffer(::grpc::ServerContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetModelStatus(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetModelStatus(::grpc::ServerContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::Call(::grpc::ServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace agent

