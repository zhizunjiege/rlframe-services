// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace game {
namespace types {
class CallData;
struct CallDataDefaultTypeInternal;
extern CallDataDefaultTypeInternal _CallData_default_instance_;
class CommonRequest;
struct CommonRequestDefaultTypeInternal;
extern CommonRequestDefaultTypeInternal _CommonRequest_default_instance_;
class CommonResponse;
struct CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class ServiceState;
struct ServiceStateDefaultTypeInternal;
extern ServiceStateDefaultTypeInternal _ServiceState_default_instance_;
class SimAction;
struct SimActionDefaultTypeInternal;
extern SimActionDefaultTypeInternal _SimAction_default_instance_;
class SimAction_ActionsEntry_DoNotUse;
struct SimAction_ActionsEntry_DoNotUseDefaultTypeInternal;
extern SimAction_ActionsEntry_DoNotUseDefaultTypeInternal _SimAction_ActionsEntry_DoNotUse_default_instance_;
class SimEntity;
struct SimEntityDefaultTypeInternal;
extern SimEntityDefaultTypeInternal _SimEntity_default_instance_;
class SimEntity_ParamsEntry_DoNotUse;
struct SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal;
extern SimEntity_ParamsEntry_DoNotUseDefaultTypeInternal _SimEntity_ParamsEntry_DoNotUse_default_instance_;
class SimModel;
struct SimModelDefaultTypeInternal;
extern SimModelDefaultTypeInternal _SimModel_default_instance_;
class SimParam;
struct SimParamDefaultTypeInternal;
extern SimParamDefaultTypeInternal _SimParam_default_instance_;
class SimParam_Array;
struct SimParam_ArrayDefaultTypeInternal;
extern SimParam_ArrayDefaultTypeInternal _SimParam_Array_default_instance_;
class SimParam_Struct;
struct SimParam_StructDefaultTypeInternal;
extern SimParam_StructDefaultTypeInternal _SimParam_Struct_default_instance_;
class SimParam_Struct_FieldsEntry_DoNotUse;
struct SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal;
extern SimParam_Struct_FieldsEntry_DoNotUseDefaultTypeInternal _SimParam_Struct_FieldsEntry_DoNotUse_default_instance_;
class SimState;
struct SimStateDefaultTypeInternal;
extern SimStateDefaultTypeInternal _SimState_default_instance_;
class SimState_StatesEntry_DoNotUse;
struct SimState_StatesEntry_DoNotUseDefaultTypeInternal;
extern SimState_StatesEntry_DoNotUseDefaultTypeInternal _SimState_StatesEntry_DoNotUse_default_instance_;
}  // namespace types
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::types::CallData* Arena::CreateMaybeMessage<::game::types::CallData>(Arena*);
template<> ::game::types::CommonRequest* Arena::CreateMaybeMessage<::game::types::CommonRequest>(Arena*);
template<> ::game::types::CommonResponse* Arena::CreateMaybeMessage<::game::types::CommonResponse>(Arena*);
template<> ::game::types::ServiceState* Arena::CreateMaybeMessage<::game::types::ServiceState>(Arena*);
template<> ::game::types::SimAction* Arena::CreateMaybeMessage<::game::types::SimAction>(Arena*);
template<> ::game::types::SimAction_ActionsEntry_DoNotUse* Arena::CreateMaybeMessage<::game::types::SimAction_ActionsEntry_DoNotUse>(Arena*);
template<> ::game::types::SimEntity* Arena::CreateMaybeMessage<::game::types::SimEntity>(Arena*);
template<> ::game::types::SimEntity_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::game::types::SimEntity_ParamsEntry_DoNotUse>(Arena*);
template<> ::game::types::SimModel* Arena::CreateMaybeMessage<::game::types::SimModel>(Arena*);
template<> ::game::types::SimParam* Arena::CreateMaybeMessage<::game::types::SimParam>(Arena*);
template<> ::game::types::SimParam_Array* Arena::CreateMaybeMessage<::game::types::SimParam_Array>(Arena*);
template<> ::game::types::SimParam_Struct* Arena::CreateMaybeMessage<::game::types::SimParam_Struct>(Arena*);
template<> ::game::types::SimParam_Struct_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::game::types::SimParam_Struct_FieldsEntry_DoNotUse>(Arena*);
template<> ::game::types::SimState* Arena::CreateMaybeMessage<::game::types::SimState>(Arena*);
template<> ::game::types::SimState_StatesEntry_DoNotUse* Arena::CreateMaybeMessage<::game::types::SimState_StatesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace types {

enum ServiceState_State : int {
  ServiceState_State_UNINITED = 0,
  ServiceState_State_INITED = 1,
  ServiceState_State_ServiceState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceState_State_ServiceState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceState_State_IsValid(int value);
constexpr ServiceState_State ServiceState_State_State_MIN = ServiceState_State_UNINITED;
constexpr ServiceState_State ServiceState_State_State_MAX = ServiceState_State_INITED;
constexpr int ServiceState_State_State_ARRAYSIZE = ServiceState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceState_State_descriptor();
template<typename T>
inline const std::string& ServiceState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceState_State_descriptor(), enum_t_value);
}
inline bool ServiceState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceState_State>(
    ServiceState_State_descriptor(), name, value);
}
// ===================================================================

class CommonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.types.CommonRequest) */ {
 public:
  inline CommonRequest() : CommonRequest(nullptr) {}
  explicit constexpr CommonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonRequest(const CommonRequest& from);
  CommonRequest(CommonRequest&& from) noexcept
    : CommonRequest() {
    *this = ::std::move(from);
  }

  inline CommonRequest& operator=(const CommonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRequest& operator=(CommonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonRequest* internal_default_instance() {
    return reinterpret_cast<const CommonRequest*>(
               &_CommonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonRequest& a, CommonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CommonRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CommonRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.CommonRequest";
  }
  protected:
  explicit CommonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.types.CommonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class CommonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.types.CommonResponse) */ {
 public:
  inline CommonResponse() : CommonResponse(nullptr) {}
  explicit constexpr CommonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CommonResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CommonResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.CommonResponse";
  }
  protected:
  explicit CommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.types.CommonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class CallData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.CallData) */ {
 public:
  inline CallData() : CallData(nullptr) {}
  ~CallData() override;
  explicit constexpr CallData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallData(const CallData& from);
  CallData(CallData&& from) noexcept
    : CallData() {
    *this = ::std::move(from);
  }

  inline CallData& operator=(const CallData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallData& operator=(CallData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallData* internal_default_instance() {
    return reinterpret_cast<const CallData*>(
               &_CallData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CallData& a, CallData& b) {
    a.Swap(&b);
  }
  inline void Swap(CallData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.CallData";
  }
  protected:
  explicit CallData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDstrFieldNumber = 2,
    kDbinFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string dstr = 2;
  void clear_dstr();
  const std::string& dstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstr();
  PROTOBUF_NODISCARD std::string* release_dstr();
  void set_allocated_dstr(std::string* dstr);
  private:
  const std::string& _internal_dstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstr(const std::string& value);
  std::string* _internal_mutable_dstr();
  public:

  // bytes dbin = 3;
  void clear_dbin();
  const std::string& dbin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dbin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dbin();
  PROTOBUF_NODISCARD std::string* release_dbin();
  void set_allocated_dbin(std::string* dbin);
  private:
  const std::string& _internal_dbin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dbin(const std::string& value);
  std::string* _internal_mutable_dbin();
  public:

  // @@protoc_insertion_point(class_scope:game.types.CallData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ServiceState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.ServiceState) */ {
 public:
  inline ServiceState() : ServiceState(nullptr) {}
  ~ServiceState() override;
  explicit constexpr ServiceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceState(const ServiceState& from);
  ServiceState(ServiceState&& from) noexcept
    : ServiceState() {
    *this = ::std::move(from);
  }

  inline ServiceState& operator=(const ServiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceState& operator=(ServiceState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceState* internal_default_instance() {
    return reinterpret_cast<const ServiceState*>(
               &_ServiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceState& a, ServiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.ServiceState";
  }
  protected:
  explicit ServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceState_State State;
  static constexpr State UNINITED =
    ServiceState_State_UNINITED;
  static constexpr State INITED =
    ServiceState_State_INITED;
  static inline bool State_IsValid(int value) {
    return ServiceState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ServiceState_State_State_MIN;
  static constexpr State State_MAX =
    ServiceState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ServiceState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ServiceState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ServiceState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ServiceState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .game.types.ServiceState.State state = 1;
  void clear_state();
  ::game::types::ServiceState_State state() const;
  void set_state(::game::types::ServiceState_State value);
  private:
  ::game::types::ServiceState_State _internal_state() const;
  void _internal_set_state(::game::types::ServiceState_State value);
  public:

  // @@protoc_insertion_point(class_scope:game.types.ServiceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimParam_Array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimParam.Array) */ {
 public:
  inline SimParam_Array() : SimParam_Array(nullptr) {}
  ~SimParam_Array() override;
  explicit constexpr SimParam_Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimParam_Array(const SimParam_Array& from);
  SimParam_Array(SimParam_Array&& from) noexcept
    : SimParam_Array() {
    *this = ::std::move(from);
  }

  inline SimParam_Array& operator=(const SimParam_Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimParam_Array& operator=(SimParam_Array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimParam_Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimParam_Array* internal_default_instance() {
    return reinterpret_cast<const SimParam_Array*>(
               &_SimParam_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimParam_Array& a, SimParam_Array& b) {
    a.Swap(&b);
  }
  inline void Swap(SimParam_Array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimParam_Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimParam_Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimParam_Array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimParam_Array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimParam_Array& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimParam_Array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimParam.Array";
  }
  protected:
  explicit SimParam_Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .game.types.SimParam items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::game::types::SimParam* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimParam >*
      mutable_items();
  private:
  const ::game::types::SimParam& _internal_items(int index) const;
  ::game::types::SimParam* _internal_add_items();
  public:
  const ::game::types::SimParam& items(int index) const;
  ::game::types::SimParam* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimParam >&
      items() const;

  // @@protoc_insertion_point(class_scope:game.types.SimParam.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimParam > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimParam_Struct_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimParam_Struct_FieldsEntry_DoNotUse, 
    std::string, ::game::types::SimParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimParam_Struct_FieldsEntry_DoNotUse, 
    std::string, ::game::types::SimParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SimParam_Struct_FieldsEntry_DoNotUse();
  explicit constexpr SimParam_Struct_FieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimParam_Struct_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimParam_Struct_FieldsEntry_DoNotUse& other);
  static const SimParam_Struct_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimParam_Struct_FieldsEntry_DoNotUse*>(&_SimParam_Struct_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "game.types.SimParam.Struct.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimParam_Struct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimParam.Struct) */ {
 public:
  inline SimParam_Struct() : SimParam_Struct(nullptr) {}
  ~SimParam_Struct() override;
  explicit constexpr SimParam_Struct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimParam_Struct(const SimParam_Struct& from);
  SimParam_Struct(SimParam_Struct&& from) noexcept
    : SimParam_Struct() {
    *this = ::std::move(from);
  }

  inline SimParam_Struct& operator=(const SimParam_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimParam_Struct& operator=(SimParam_Struct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimParam_Struct& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimParam_Struct* internal_default_instance() {
    return reinterpret_cast<const SimParam_Struct*>(
               &_SimParam_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SimParam_Struct& a, SimParam_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(SimParam_Struct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimParam_Struct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimParam_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimParam_Struct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimParam_Struct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimParam_Struct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimParam_Struct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimParam.Struct";
  }
  protected:
  explicit SimParam_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // map<string, .game.types.SimParam> fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:game.types.SimParam.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimParam_Struct_FieldsEntry_DoNotUse,
      std::string, ::game::types::SimParam,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimParam) */ {
 public:
  inline SimParam() : SimParam(nullptr) {}
  ~SimParam() override;
  explicit constexpr SimParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimParam(const SimParam& from);
  SimParam(SimParam&& from) noexcept
    : SimParam() {
    *this = ::std::move(from);
  }

  inline SimParam& operator=(const SimParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimParam& operator=(SimParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimParam& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kVdouble = 1,
    kVint32 = 2,
    kVbool = 3,
    kVstring = 4,
    kVarray = 5,
    kVstruct = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const SimParam* internal_default_instance() {
    return reinterpret_cast<const SimParam*>(
               &_SimParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SimParam& a, SimParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SimParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimParam";
  }
  protected:
  explicit SimParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimParam_Array Array;
  typedef SimParam_Struct Struct;

  // accessors -------------------------------------------------------

  enum : int {
    kVdoubleFieldNumber = 1,
    kVint32FieldNumber = 2,
    kVboolFieldNumber = 3,
    kVstringFieldNumber = 4,
    kVarrayFieldNumber = 5,
    kVstructFieldNumber = 6,
  };
  // double vdouble = 1;
  bool has_vdouble() const;
  private:
  bool _internal_has_vdouble() const;
  public:
  void clear_vdouble();
  double vdouble() const;
  void set_vdouble(double value);
  private:
  double _internal_vdouble() const;
  void _internal_set_vdouble(double value);
  public:

  // int32 vint32 = 2;
  bool has_vint32() const;
  private:
  bool _internal_has_vint32() const;
  public:
  void clear_vint32();
  int32_t vint32() const;
  void set_vint32(int32_t value);
  private:
  int32_t _internal_vint32() const;
  void _internal_set_vint32(int32_t value);
  public:

  // bool vbool = 3;
  bool has_vbool() const;
  private:
  bool _internal_has_vbool() const;
  public:
  void clear_vbool();
  bool vbool() const;
  void set_vbool(bool value);
  private:
  bool _internal_vbool() const;
  void _internal_set_vbool(bool value);
  public:

  // string vstring = 4;
  bool has_vstring() const;
  private:
  bool _internal_has_vstring() const;
  public:
  void clear_vstring();
  const std::string& vstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vstring();
  PROTOBUF_NODISCARD std::string* release_vstring();
  void set_allocated_vstring(std::string* vstring);
  private:
  const std::string& _internal_vstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vstring(const std::string& value);
  std::string* _internal_mutable_vstring();
  public:

  // .game.types.SimParam.Array varray = 5;
  bool has_varray() const;
  private:
  bool _internal_has_varray() const;
  public:
  void clear_varray();
  const ::game::types::SimParam_Array& varray() const;
  PROTOBUF_NODISCARD ::game::types::SimParam_Array* release_varray();
  ::game::types::SimParam_Array* mutable_varray();
  void set_allocated_varray(::game::types::SimParam_Array* varray);
  private:
  const ::game::types::SimParam_Array& _internal_varray() const;
  ::game::types::SimParam_Array* _internal_mutable_varray();
  public:
  void unsafe_arena_set_allocated_varray(
      ::game::types::SimParam_Array* varray);
  ::game::types::SimParam_Array* unsafe_arena_release_varray();

  // .game.types.SimParam.Struct vstruct = 6;
  bool has_vstruct() const;
  private:
  bool _internal_has_vstruct() const;
  public:
  void clear_vstruct();
  const ::game::types::SimParam_Struct& vstruct() const;
  PROTOBUF_NODISCARD ::game::types::SimParam_Struct* release_vstruct();
  ::game::types::SimParam_Struct* mutable_vstruct();
  void set_allocated_vstruct(::game::types::SimParam_Struct* vstruct);
  private:
  const ::game::types::SimParam_Struct& _internal_vstruct() const;
  ::game::types::SimParam_Struct* _internal_mutable_vstruct();
  public:
  void unsafe_arena_set_allocated_vstruct(
      ::game::types::SimParam_Struct* vstruct);
  ::game::types::SimParam_Struct* unsafe_arena_release_vstruct();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:game.types.SimParam)
 private:
  class _Internal;
  void set_has_vdouble();
  void set_has_vint32();
  void set_has_vbool();
  void set_has_vstring();
  void set_has_varray();
  void set_has_vstruct();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double vdouble_;
    int32_t vint32_;
    bool vbool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vstring_;
    ::game::types::SimParam_Array* varray_;
    ::game::types::SimParam_Struct* vstruct_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimEntity_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimEntity_ParamsEntry_DoNotUse, 
    std::string, ::game::types::SimParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimEntity_ParamsEntry_DoNotUse, 
    std::string, ::game::types::SimParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SimEntity_ParamsEntry_DoNotUse();
  explicit constexpr SimEntity_ParamsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimEntity_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimEntity_ParamsEntry_DoNotUse& other);
  static const SimEntity_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimEntity_ParamsEntry_DoNotUse*>(&_SimEntity_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "game.types.SimEntity.ParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimEntity) */ {
 public:
  inline SimEntity() : SimEntity(nullptr) {}
  ~SimEntity() override;
  explicit constexpr SimEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimEntity(const SimEntity& from);
  SimEntity(SimEntity&& from) noexcept
    : SimEntity() {
    *this = ::std::move(from);
  }

  inline SimEntity& operator=(const SimEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimEntity& operator=(SimEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimEntity* internal_default_instance() {
    return reinterpret_cast<const SimEntity*>(
               &_SimEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SimEntity& a, SimEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(SimEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimEntity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimEntity";
  }
  protected:
  explicit SimEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // map<string, .game.types.SimParam> params = 1;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:game.types.SimEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimEntity_ParamsEntry_DoNotUse,
      std::string, ::game::types::SimParam,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimModel) */ {
 public:
  inline SimModel() : SimModel(nullptr) {}
  ~SimModel() override;
  explicit constexpr SimModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimModel(const SimModel& from);
  SimModel(SimModel&& from) noexcept
    : SimModel() {
    *this = ::std::move(from);
  }

  inline SimModel& operator=(const SimModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimModel& operator=(SimModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimModel* internal_default_instance() {
    return reinterpret_cast<const SimModel*>(
               &_SimModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SimModel& a, SimModel& b) {
    a.Swap(&b);
  }
  inline void Swap(SimModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimModel";
  }
  protected:
  explicit SimModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .game.types.SimEntity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::game::types::SimEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimEntity >*
      mutable_entities();
  private:
  const ::game::types::SimEntity& _internal_entities(int index) const;
  ::game::types::SimEntity* _internal_add_entities();
  public:
  const ::game::types::SimEntity& entities(int index) const;
  ::game::types::SimEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimEntity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:game.types.SimModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimEntity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimState_StatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimState_StatesEntry_DoNotUse, 
    std::string, ::game::types::SimModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimState_StatesEntry_DoNotUse, 
    std::string, ::game::types::SimModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SimState_StatesEntry_DoNotUse();
  explicit constexpr SimState_StatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimState_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimState_StatesEntry_DoNotUse& other);
  static const SimState_StatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimState_StatesEntry_DoNotUse*>(&_SimState_StatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "game.types.SimState.StatesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimState) */ {
 public:
  inline SimState() : SimState(nullptr) {}
  ~SimState() override;
  explicit constexpr SimState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimState(const SimState& from);
  SimState(SimState&& from) noexcept
    : SimState() {
    *this = ::std::move(from);
  }

  inline SimState& operator=(const SimState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimState& operator=(SimState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimState* internal_default_instance() {
    return reinterpret_cast<const SimState*>(
               &_SimState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SimState& a, SimState& b) {
    a.Swap(&b);
  }
  inline void Swap(SimState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimState";
  }
  protected:
  explicit SimState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
    kRewardFieldNumber = 4,
    kTerminatedFieldNumber = 2,
    kTruncatedFieldNumber = 3,
  };
  // map<string, .game.types.SimModel> states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
      _internal_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
      _internal_mutable_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
      states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
      mutable_states();

  // double reward = 4;
  void clear_reward();
  double reward() const;
  void set_reward(double value);
  private:
  double _internal_reward() const;
  void _internal_set_reward(double value);
  public:

  // bool terminated = 2;
  void clear_terminated();
  bool terminated() const;
  void set_terminated(bool value);
  private:
  bool _internal_terminated() const;
  void _internal_set_terminated(bool value);
  public:

  // bool truncated = 3;
  void clear_truncated();
  bool truncated() const;
  void set_truncated(bool value);
  private:
  bool _internal_truncated() const;
  void _internal_set_truncated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.types.SimState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimState_StatesEntry_DoNotUse,
      std::string, ::game::types::SimModel,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> states_;
  double reward_;
  bool terminated_;
  bool truncated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SimAction_ActionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimAction_ActionsEntry_DoNotUse, 
    std::string, ::game::types::SimModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimAction_ActionsEntry_DoNotUse, 
    std::string, ::game::types::SimModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SimAction_ActionsEntry_DoNotUse();
  explicit constexpr SimAction_ActionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimAction_ActionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimAction_ActionsEntry_DoNotUse& other);
  static const SimAction_ActionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimAction_ActionsEntry_DoNotUse*>(&_SimAction_ActionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "game.types.SimAction.ActionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.types.SimAction) */ {
 public:
  inline SimAction() : SimAction(nullptr) {}
  ~SimAction() override;
  explicit constexpr SimAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimAction(const SimAction& from);
  SimAction(SimAction&& from) noexcept
    : SimAction() {
    *this = ::std::move(from);
  }

  inline SimAction& operator=(const SimAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimAction& operator=(SimAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimAction* internal_default_instance() {
    return reinterpret_cast<const SimAction*>(
               &_SimAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SimAction& a, SimAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SimAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimAction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.types.SimAction";
  }
  protected:
  explicit SimAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // map<string, .game.types.SimModel> actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
      _internal_actions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
      _internal_mutable_actions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
      actions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
      mutable_actions();

  // @@protoc_insertion_point(class_scope:game.types.SimAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimAction_ActionsEntry_DoNotUse,
      std::string, ::game::types::SimModel,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonRequest

// -------------------------------------------------------------------

// CommonResponse

// -------------------------------------------------------------------

// CallData

// string name = 1;
inline void CallData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CallData::name() const {
  // @@protoc_insertion_point(field_get:game.types.CallData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.types.CallData.name)
}
inline std::string* CallData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.types.CallData.name)
  return _s;
}
inline const std::string& CallData::_internal_name() const {
  return name_.Get();
}
inline void CallData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallData::release_name() {
  // @@protoc_insertion_point(field_release:game.types.CallData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CallData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.types.CallData.name)
}

// string dstr = 2;
inline void CallData::clear_dstr() {
  dstr_.ClearToEmpty();
}
inline const std::string& CallData::dstr() const {
  // @@protoc_insertion_point(field_get:game.types.CallData.dstr)
  return _internal_dstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallData::set_dstr(ArgT0&& arg0, ArgT... args) {
 
 dstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.types.CallData.dstr)
}
inline std::string* CallData::mutable_dstr() {
  std::string* _s = _internal_mutable_dstr();
  // @@protoc_insertion_point(field_mutable:game.types.CallData.dstr)
  return _s;
}
inline const std::string& CallData::_internal_dstr() const {
  return dstr_.Get();
}
inline void CallData::_internal_set_dstr(const std::string& value) {
  
  dstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallData::_internal_mutable_dstr() {
  
  return dstr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallData::release_dstr() {
  // @@protoc_insertion_point(field_release:game.types.CallData.dstr)
  return dstr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CallData::set_allocated_dstr(std::string* dstr) {
  if (dstr != nullptr) {
    
  } else {
    
  }
  dstr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dstr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dstr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.types.CallData.dstr)
}

// bytes dbin = 3;
inline void CallData::clear_dbin() {
  dbin_.ClearToEmpty();
}
inline const std::string& CallData::dbin() const {
  // @@protoc_insertion_point(field_get:game.types.CallData.dbin)
  return _internal_dbin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallData::set_dbin(ArgT0&& arg0, ArgT... args) {
 
 dbin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.types.CallData.dbin)
}
inline std::string* CallData::mutable_dbin() {
  std::string* _s = _internal_mutable_dbin();
  // @@protoc_insertion_point(field_mutable:game.types.CallData.dbin)
  return _s;
}
inline const std::string& CallData::_internal_dbin() const {
  return dbin_.Get();
}
inline void CallData::_internal_set_dbin(const std::string& value) {
  
  dbin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallData::_internal_mutable_dbin() {
  
  return dbin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallData::release_dbin() {
  // @@protoc_insertion_point(field_release:game.types.CallData.dbin)
  return dbin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CallData::set_allocated_dbin(std::string* dbin) {
  if (dbin != nullptr) {
    
  } else {
    
  }
  dbin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dbin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dbin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.types.CallData.dbin)
}

// -------------------------------------------------------------------

// ServiceState

// .game.types.ServiceState.State state = 1;
inline void ServiceState::clear_state() {
  state_ = 0;
}
inline ::game::types::ServiceState_State ServiceState::_internal_state() const {
  return static_cast< ::game::types::ServiceState_State >(state_);
}
inline ::game::types::ServiceState_State ServiceState::state() const {
  // @@protoc_insertion_point(field_get:game.types.ServiceState.state)
  return _internal_state();
}
inline void ServiceState::_internal_set_state(::game::types::ServiceState_State value) {
  
  state_ = value;
}
inline void ServiceState::set_state(::game::types::ServiceState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:game.types.ServiceState.state)
}

// -------------------------------------------------------------------

// SimParam_Array

// repeated .game.types.SimParam items = 1;
inline int SimParam_Array::_internal_items_size() const {
  return items_.size();
}
inline int SimParam_Array::items_size() const {
  return _internal_items_size();
}
inline void SimParam_Array::clear_items() {
  items_.Clear();
}
inline ::game::types::SimParam* SimParam_Array::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:game.types.SimParam.Array.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimParam >*
SimParam_Array::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:game.types.SimParam.Array.items)
  return &items_;
}
inline const ::game::types::SimParam& SimParam_Array::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::game::types::SimParam& SimParam_Array::items(int index) const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.Array.items)
  return _internal_items(index);
}
inline ::game::types::SimParam* SimParam_Array::_internal_add_items() {
  return items_.Add();
}
inline ::game::types::SimParam* SimParam_Array::add_items() {
  ::game::types::SimParam* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:game.types.SimParam.Array.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimParam >&
SimParam_Array::items() const {
  // @@protoc_insertion_point(field_list:game.types.SimParam.Array.items)
  return items_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimParam_Struct

// map<string, .game.types.SimParam> fields = 1;
inline int SimParam_Struct::_internal_fields_size() const {
  return fields_.size();
}
inline int SimParam_Struct::fields_size() const {
  return _internal_fields_size();
}
inline void SimParam_Struct::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
SimParam_Struct::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
SimParam_Struct::fields() const {
  // @@protoc_insertion_point(field_map:game.types.SimParam.Struct.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
SimParam_Struct::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
SimParam_Struct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:game.types.SimParam.Struct.fields)
  return _internal_mutable_fields();
}

// -------------------------------------------------------------------

// SimParam

// double vdouble = 1;
inline bool SimParam::_internal_has_vdouble() const {
  return value_case() == kVdouble;
}
inline bool SimParam::has_vdouble() const {
  return _internal_has_vdouble();
}
inline void SimParam::set_has_vdouble() {
  _oneof_case_[0] = kVdouble;
}
inline void SimParam::clear_vdouble() {
  if (_internal_has_vdouble()) {
    value_.vdouble_ = 0;
    clear_has_value();
  }
}
inline double SimParam::_internal_vdouble() const {
  if (_internal_has_vdouble()) {
    return value_.vdouble_;
  }
  return 0;
}
inline void SimParam::_internal_set_vdouble(double value) {
  if (!_internal_has_vdouble()) {
    clear_value();
    set_has_vdouble();
  }
  value_.vdouble_ = value;
}
inline double SimParam::vdouble() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.vdouble)
  return _internal_vdouble();
}
inline void SimParam::set_vdouble(double value) {
  _internal_set_vdouble(value);
  // @@protoc_insertion_point(field_set:game.types.SimParam.vdouble)
}

// int32 vint32 = 2;
inline bool SimParam::_internal_has_vint32() const {
  return value_case() == kVint32;
}
inline bool SimParam::has_vint32() const {
  return _internal_has_vint32();
}
inline void SimParam::set_has_vint32() {
  _oneof_case_[0] = kVint32;
}
inline void SimParam::clear_vint32() {
  if (_internal_has_vint32()) {
    value_.vint32_ = 0;
    clear_has_value();
  }
}
inline int32_t SimParam::_internal_vint32() const {
  if (_internal_has_vint32()) {
    return value_.vint32_;
  }
  return 0;
}
inline void SimParam::_internal_set_vint32(int32_t value) {
  if (!_internal_has_vint32()) {
    clear_value();
    set_has_vint32();
  }
  value_.vint32_ = value;
}
inline int32_t SimParam::vint32() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.vint32)
  return _internal_vint32();
}
inline void SimParam::set_vint32(int32_t value) {
  _internal_set_vint32(value);
  // @@protoc_insertion_point(field_set:game.types.SimParam.vint32)
}

// bool vbool = 3;
inline bool SimParam::_internal_has_vbool() const {
  return value_case() == kVbool;
}
inline bool SimParam::has_vbool() const {
  return _internal_has_vbool();
}
inline void SimParam::set_has_vbool() {
  _oneof_case_[0] = kVbool;
}
inline void SimParam::clear_vbool() {
  if (_internal_has_vbool()) {
    value_.vbool_ = false;
    clear_has_value();
  }
}
inline bool SimParam::_internal_vbool() const {
  if (_internal_has_vbool()) {
    return value_.vbool_;
  }
  return false;
}
inline void SimParam::_internal_set_vbool(bool value) {
  if (!_internal_has_vbool()) {
    clear_value();
    set_has_vbool();
  }
  value_.vbool_ = value;
}
inline bool SimParam::vbool() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.vbool)
  return _internal_vbool();
}
inline void SimParam::set_vbool(bool value) {
  _internal_set_vbool(value);
  // @@protoc_insertion_point(field_set:game.types.SimParam.vbool)
}

// string vstring = 4;
inline bool SimParam::_internal_has_vstring() const {
  return value_case() == kVstring;
}
inline bool SimParam::has_vstring() const {
  return _internal_has_vstring();
}
inline void SimParam::set_has_vstring() {
  _oneof_case_[0] = kVstring;
}
inline void SimParam::clear_vstring() {
  if (_internal_has_vstring()) {
    value_.vstring_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& SimParam::vstring() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.vstring)
  return _internal_vstring();
}
template <typename ArgT0, typename... ArgT>
inline void SimParam::set_vstring(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_vstring()) {
    clear_value();
    set_has_vstring();
    value_.vstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.vstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.types.SimParam.vstring)
}
inline std::string* SimParam::mutable_vstring() {
  std::string* _s = _internal_mutable_vstring();
  // @@protoc_insertion_point(field_mutable:game.types.SimParam.vstring)
  return _s;
}
inline const std::string& SimParam::_internal_vstring() const {
  if (_internal_has_vstring()) {
    return value_.vstring_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SimParam::_internal_set_vstring(const std::string& value) {
  if (!_internal_has_vstring()) {
    clear_value();
    set_has_vstring();
    value_.vstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.vstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimParam::_internal_mutable_vstring() {
  if (!_internal_has_vstring()) {
    clear_value();
    set_has_vstring();
    value_.vstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.vstring_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimParam::release_vstring() {
  // @@protoc_insertion_point(field_release:game.types.SimParam.vstring)
  if (_internal_has_vstring()) {
    clear_has_value();
    return value_.vstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SimParam::set_allocated_vstring(std::string* vstring) {
  if (has_value()) {
    clear_value();
  }
  if (vstring != nullptr) {
    set_has_vstring();
    value_.vstring_.UnsafeSetDefault(vstring);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(vstring);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:game.types.SimParam.vstring)
}

// .game.types.SimParam.Array varray = 5;
inline bool SimParam::_internal_has_varray() const {
  return value_case() == kVarray;
}
inline bool SimParam::has_varray() const {
  return _internal_has_varray();
}
inline void SimParam::set_has_varray() {
  _oneof_case_[0] = kVarray;
}
inline void SimParam::clear_varray() {
  if (_internal_has_varray()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.varray_;
    }
    clear_has_value();
  }
}
inline ::game::types::SimParam_Array* SimParam::release_varray() {
  // @@protoc_insertion_point(field_release:game.types.SimParam.varray)
  if (_internal_has_varray()) {
    clear_has_value();
      ::game::types::SimParam_Array* temp = value_.varray_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.varray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::types::SimParam_Array& SimParam::_internal_varray() const {
  return _internal_has_varray()
      ? *value_.varray_
      : reinterpret_cast< ::game::types::SimParam_Array&>(::game::types::_SimParam_Array_default_instance_);
}
inline const ::game::types::SimParam_Array& SimParam::varray() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.varray)
  return _internal_varray();
}
inline ::game::types::SimParam_Array* SimParam::unsafe_arena_release_varray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.types.SimParam.varray)
  if (_internal_has_varray()) {
    clear_has_value();
    ::game::types::SimParam_Array* temp = value_.varray_;
    value_.varray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimParam::unsafe_arena_set_allocated_varray(::game::types::SimParam_Array* varray) {
  clear_value();
  if (varray) {
    set_has_varray();
    value_.varray_ = varray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.types.SimParam.varray)
}
inline ::game::types::SimParam_Array* SimParam::_internal_mutable_varray() {
  if (!_internal_has_varray()) {
    clear_value();
    set_has_varray();
    value_.varray_ = CreateMaybeMessage< ::game::types::SimParam_Array >(GetArenaForAllocation());
  }
  return value_.varray_;
}
inline ::game::types::SimParam_Array* SimParam::mutable_varray() {
  ::game::types::SimParam_Array* _msg = _internal_mutable_varray();
  // @@protoc_insertion_point(field_mutable:game.types.SimParam.varray)
  return _msg;
}

// .game.types.SimParam.Struct vstruct = 6;
inline bool SimParam::_internal_has_vstruct() const {
  return value_case() == kVstruct;
}
inline bool SimParam::has_vstruct() const {
  return _internal_has_vstruct();
}
inline void SimParam::set_has_vstruct() {
  _oneof_case_[0] = kVstruct;
}
inline void SimParam::clear_vstruct() {
  if (_internal_has_vstruct()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.vstruct_;
    }
    clear_has_value();
  }
}
inline ::game::types::SimParam_Struct* SimParam::release_vstruct() {
  // @@protoc_insertion_point(field_release:game.types.SimParam.vstruct)
  if (_internal_has_vstruct()) {
    clear_has_value();
      ::game::types::SimParam_Struct* temp = value_.vstruct_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vstruct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::types::SimParam_Struct& SimParam::_internal_vstruct() const {
  return _internal_has_vstruct()
      ? *value_.vstruct_
      : reinterpret_cast< ::game::types::SimParam_Struct&>(::game::types::_SimParam_Struct_default_instance_);
}
inline const ::game::types::SimParam_Struct& SimParam::vstruct() const {
  // @@protoc_insertion_point(field_get:game.types.SimParam.vstruct)
  return _internal_vstruct();
}
inline ::game::types::SimParam_Struct* SimParam::unsafe_arena_release_vstruct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.types.SimParam.vstruct)
  if (_internal_has_vstruct()) {
    clear_has_value();
    ::game::types::SimParam_Struct* temp = value_.vstruct_;
    value_.vstruct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimParam::unsafe_arena_set_allocated_vstruct(::game::types::SimParam_Struct* vstruct) {
  clear_value();
  if (vstruct) {
    set_has_vstruct();
    value_.vstruct_ = vstruct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.types.SimParam.vstruct)
}
inline ::game::types::SimParam_Struct* SimParam::_internal_mutable_vstruct() {
  if (!_internal_has_vstruct()) {
    clear_value();
    set_has_vstruct();
    value_.vstruct_ = CreateMaybeMessage< ::game::types::SimParam_Struct >(GetArenaForAllocation());
  }
  return value_.vstruct_;
}
inline ::game::types::SimParam_Struct* SimParam::mutable_vstruct() {
  ::game::types::SimParam_Struct* _msg = _internal_mutable_vstruct();
  // @@protoc_insertion_point(field_mutable:game.types.SimParam.vstruct)
  return _msg;
}

inline bool SimParam::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SimParam::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SimParam::ValueCase SimParam::value_case() const {
  return SimParam::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimEntity

// map<string, .game.types.SimParam> params = 1;
inline int SimEntity::_internal_params_size() const {
  return params_.size();
}
inline int SimEntity::params_size() const {
  return _internal_params_size();
}
inline void SimEntity::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
SimEntity::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >&
SimEntity::params() const {
  // @@protoc_insertion_point(field_map:game.types.SimEntity.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
SimEntity::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimParam >*
SimEntity::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:game.types.SimEntity.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// SimModel

// repeated .game.types.SimEntity entities = 1;
inline int SimModel::_internal_entities_size() const {
  return entities_.size();
}
inline int SimModel::entities_size() const {
  return _internal_entities_size();
}
inline void SimModel::clear_entities() {
  entities_.Clear();
}
inline ::game::types::SimEntity* SimModel::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:game.types.SimModel.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimEntity >*
SimModel::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:game.types.SimModel.entities)
  return &entities_;
}
inline const ::game::types::SimEntity& SimModel::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::game::types::SimEntity& SimModel::entities(int index) const {
  // @@protoc_insertion_point(field_get:game.types.SimModel.entities)
  return _internal_entities(index);
}
inline ::game::types::SimEntity* SimModel::_internal_add_entities() {
  return entities_.Add();
}
inline ::game::types::SimEntity* SimModel::add_entities() {
  ::game::types::SimEntity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:game.types.SimModel.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::types::SimEntity >&
SimModel::entities() const {
  // @@protoc_insertion_point(field_list:game.types.SimModel.entities)
  return entities_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimState

// map<string, .game.types.SimModel> states = 1;
inline int SimState::_internal_states_size() const {
  return states_.size();
}
inline int SimState::states_size() const {
  return _internal_states_size();
}
inline void SimState::clear_states() {
  states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
SimState::_internal_states() const {
  return states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
SimState::states() const {
  // @@protoc_insertion_point(field_map:game.types.SimState.states)
  return _internal_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
SimState::_internal_mutable_states() {
  return states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
SimState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_map:game.types.SimState.states)
  return _internal_mutable_states();
}

// bool terminated = 2;
inline void SimState::clear_terminated() {
  terminated_ = false;
}
inline bool SimState::_internal_terminated() const {
  return terminated_;
}
inline bool SimState::terminated() const {
  // @@protoc_insertion_point(field_get:game.types.SimState.terminated)
  return _internal_terminated();
}
inline void SimState::_internal_set_terminated(bool value) {
  
  terminated_ = value;
}
inline void SimState::set_terminated(bool value) {
  _internal_set_terminated(value);
  // @@protoc_insertion_point(field_set:game.types.SimState.terminated)
}

// bool truncated = 3;
inline void SimState::clear_truncated() {
  truncated_ = false;
}
inline bool SimState::_internal_truncated() const {
  return truncated_;
}
inline bool SimState::truncated() const {
  // @@protoc_insertion_point(field_get:game.types.SimState.truncated)
  return _internal_truncated();
}
inline void SimState::_internal_set_truncated(bool value) {
  
  truncated_ = value;
}
inline void SimState::set_truncated(bool value) {
  _internal_set_truncated(value);
  // @@protoc_insertion_point(field_set:game.types.SimState.truncated)
}

// double reward = 4;
inline void SimState::clear_reward() {
  reward_ = 0;
}
inline double SimState::_internal_reward() const {
  return reward_;
}
inline double SimState::reward() const {
  // @@protoc_insertion_point(field_get:game.types.SimState.reward)
  return _internal_reward();
}
inline void SimState::_internal_set_reward(double value) {
  
  reward_ = value;
}
inline void SimState::set_reward(double value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:game.types.SimState.reward)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimAction

// map<string, .game.types.SimModel> actions = 1;
inline int SimAction::_internal_actions_size() const {
  return actions_.size();
}
inline int SimAction::actions_size() const {
  return _internal_actions_size();
}
inline void SimAction::clear_actions() {
  actions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
SimAction::_internal_actions() const {
  return actions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >&
SimAction::actions() const {
  // @@protoc_insertion_point(field_map:game.types.SimAction.actions)
  return _internal_actions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
SimAction::_internal_mutable_actions() {
  return actions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::types::SimModel >*
SimAction::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_map:game.types.SimAction.actions)
  return _internal_mutable_actions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::types::ServiceState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::types::ServiceState_State>() {
  return ::game::types::ServiceState_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
