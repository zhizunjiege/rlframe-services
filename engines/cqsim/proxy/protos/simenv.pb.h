// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simenv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simenv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simenv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simenv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simenv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simenv_2eproto;
namespace game {
namespace simenv {
class SimCmd;
struct SimCmdDefaultTypeInternal;
extern SimCmdDefaultTypeInternal _SimCmd_default_instance_;
class SimInfo;
struct SimInfoDefaultTypeInternal;
extern SimInfoDefaultTypeInternal _SimInfo_default_instance_;
class SimenvConfig;
struct SimenvConfigDefaultTypeInternal;
extern SimenvConfigDefaultTypeInternal _SimenvConfig_default_instance_;
class SimenvConfig_Route;
struct SimenvConfig_RouteDefaultTypeInternal;
extern SimenvConfig_RouteDefaultTypeInternal _SimenvConfig_Route_default_instance_;
class SimenvConfig_RoutesEntry_DoNotUse;
struct SimenvConfig_RoutesEntry_DoNotUseDefaultTypeInternal;
extern SimenvConfig_RoutesEntry_DoNotUseDefaultTypeInternal _SimenvConfig_RoutesEntry_DoNotUse_default_instance_;
}  // namespace simenv
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::simenv::SimCmd* Arena::CreateMaybeMessage<::game::simenv::SimCmd>(Arena*);
template<> ::game::simenv::SimInfo* Arena::CreateMaybeMessage<::game::simenv::SimInfo>(Arena*);
template<> ::game::simenv::SimenvConfig* Arena::CreateMaybeMessage<::game::simenv::SimenvConfig>(Arena*);
template<> ::game::simenv::SimenvConfig_Route* Arena::CreateMaybeMessage<::game::simenv::SimenvConfig_Route>(Arena*);
template<> ::game::simenv::SimenvConfig_RoutesEntry_DoNotUse* Arena::CreateMaybeMessage<::game::simenv::SimenvConfig_RoutesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace simenv {

// ===================================================================

class SimenvConfig_Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.simenv.SimenvConfig.Route) */ {
 public:
  inline SimenvConfig_Route() : SimenvConfig_Route(nullptr) {}
  ~SimenvConfig_Route() override;
  explicit constexpr SimenvConfig_Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimenvConfig_Route(const SimenvConfig_Route& from);
  SimenvConfig_Route(SimenvConfig_Route&& from) noexcept
    : SimenvConfig_Route() {
    *this = ::std::move(from);
  }

  inline SimenvConfig_Route& operator=(const SimenvConfig_Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimenvConfig_Route& operator=(SimenvConfig_Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimenvConfig_Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimenvConfig_Route* internal_default_instance() {
    return reinterpret_cast<const SimenvConfig_Route*>(
               &_SimenvConfig_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimenvConfig_Route& a, SimenvConfig_Route& b) {
    a.Swap(&b);
  }
  inline void Swap(SimenvConfig_Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimenvConfig_Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimenvConfig_Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimenvConfig_Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimenvConfig_Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimenvConfig_Route& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimenvConfig_Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.simenv.SimenvConfig.Route";
  }
  protected:
  explicit SimenvConfig_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
  };
  // repeated string models = 1;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  const std::string& models(int index) const;
  std::string* mutable_models(int index);
  void set_models(int index, const std::string& value);
  void set_models(int index, std::string&& value);
  void set_models(int index, const char* value);
  void set_models(int index, const char* value, size_t size);
  std::string* add_models();
  void add_models(const std::string& value);
  void add_models(std::string&& value);
  void add_models(const char* value);
  void add_models(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_models();
  private:
  const std::string& _internal_models(int index) const;
  std::string* _internal_add_models();
  public:

  // @@protoc_insertion_point(class_scope:game.simenv.SimenvConfig.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> models_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simenv_2eproto;
};
// -------------------------------------------------------------------

class SimenvConfig_RoutesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimenvConfig_RoutesEntry_DoNotUse, 
    std::string, ::game::simenv::SimenvConfig_Route,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimenvConfig_RoutesEntry_DoNotUse, 
    std::string, ::game::simenv::SimenvConfig_Route,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SimenvConfig_RoutesEntry_DoNotUse();
  explicit constexpr SimenvConfig_RoutesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimenvConfig_RoutesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimenvConfig_RoutesEntry_DoNotUse& other);
  static const SimenvConfig_RoutesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimenvConfig_RoutesEntry_DoNotUse*>(&_SimenvConfig_RoutesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "game.simenv.SimenvConfig.RoutesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimenvConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.simenv.SimenvConfig) */ {
 public:
  inline SimenvConfig() : SimenvConfig(nullptr) {}
  ~SimenvConfig() override;
  explicit constexpr SimenvConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimenvConfig(const SimenvConfig& from);
  SimenvConfig(SimenvConfig&& from) noexcept
    : SimenvConfig() {
    *this = ::std::move(from);
  }

  inline SimenvConfig& operator=(const SimenvConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimenvConfig& operator=(SimenvConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimenvConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimenvConfig* internal_default_instance() {
    return reinterpret_cast<const SimenvConfig*>(
               &_SimenvConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimenvConfig& a, SimenvConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SimenvConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimenvConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimenvConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimenvConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimenvConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimenvConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimenvConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.simenv.SimenvConfig";
  }
  protected:
  explicit SimenvConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimenvConfig_Route Route;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 3,
    kNameFieldNumber = 1,
    kArgsFieldNumber = 2,
  };
  // map<string, .game.simenv.SimenvConfig.Route> routes = 3;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >&
      _internal_routes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >*
      _internal_mutable_routes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >&
      routes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >*
      mutable_routes();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string args = 2;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:game.simenv.SimenvConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimenvConfig_RoutesEntry_DoNotUse,
      std::string, ::game::simenv::SimenvConfig_Route,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simenv_2eproto;
};
// -------------------------------------------------------------------

class SimCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.simenv.SimCmd) */ {
 public:
  inline SimCmd() : SimCmd(nullptr) {}
  ~SimCmd() override;
  explicit constexpr SimCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimCmd(const SimCmd& from);
  SimCmd(SimCmd&& from) noexcept
    : SimCmd() {
    *this = ::std::move(from);
  }

  inline SimCmd& operator=(const SimCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimCmd& operator=(SimCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimCmd* internal_default_instance() {
    return reinterpret_cast<const SimCmd*>(
               &_SimCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimCmd& a, SimCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(SimCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimCmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.simenv.SimCmd";
  }
  protected:
  explicit SimCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string params = 2;
  void clear_params();
  const std::string& params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params();
  PROTOBUF_NODISCARD std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:game.simenv.SimCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simenv_2eproto;
};
// -------------------------------------------------------------------

class SimInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.simenv.SimInfo) */ {
 public:
  inline SimInfo() : SimInfo(nullptr) {}
  ~SimInfo() override;
  explicit constexpr SimInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimInfo(const SimInfo& from);
  SimInfo(SimInfo&& from) noexcept
    : SimInfo() {
    *this = ::std::move(from);
  }

  inline SimInfo& operator=(const SimInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimInfo& operator=(SimInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimInfo* internal_default_instance() {
    return reinterpret_cast<const SimInfo*>(
               &_SimInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimInfo& a, SimInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.simenv.SimInfo";
  }
  protected:
  explicit SimInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDataFieldNumber = 2,
    kLogsFieldNumber = 3,
  };
  // string state = 1;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string logs = 3;
  void clear_logs();
  const std::string& logs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logs();
  PROTOBUF_NODISCARD std::string* release_logs();
  void set_allocated_logs(std::string* logs);
  private:
  const std::string& _internal_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logs(const std::string& value);
  std::string* _internal_mutable_logs();
  public:

  // @@protoc_insertion_point(class_scope:game.simenv.SimInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simenv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimenvConfig_Route

// repeated string models = 1;
inline int SimenvConfig_Route::_internal_models_size() const {
  return models_.size();
}
inline int SimenvConfig_Route::models_size() const {
  return _internal_models_size();
}
inline void SimenvConfig_Route::clear_models() {
  models_.Clear();
}
inline std::string* SimenvConfig_Route::add_models() {
  std::string* _s = _internal_add_models();
  // @@protoc_insertion_point(field_add_mutable:game.simenv.SimenvConfig.Route.models)
  return _s;
}
inline const std::string& SimenvConfig_Route::_internal_models(int index) const {
  return models_.Get(index);
}
inline const std::string& SimenvConfig_Route::models(int index) const {
  // @@protoc_insertion_point(field_get:game.simenv.SimenvConfig.Route.models)
  return _internal_models(index);
}
inline std::string* SimenvConfig_Route::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:game.simenv.SimenvConfig.Route.models)
  return models_.Mutable(index);
}
inline void SimenvConfig_Route::set_models(int index, const std::string& value) {
  models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::set_models(int index, std::string&& value) {
  models_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::set_models(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::set_models(int index, const char* value, size_t size) {
  models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.simenv.SimenvConfig.Route.models)
}
inline std::string* SimenvConfig_Route::_internal_add_models() {
  return models_.Add();
}
inline void SimenvConfig_Route::add_models(const std::string& value) {
  models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::add_models(std::string&& value) {
  models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::add_models(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.simenv.SimenvConfig.Route.models)
}
inline void SimenvConfig_Route::add_models(const char* value, size_t size) {
  models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.simenv.SimenvConfig.Route.models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimenvConfig_Route::models() const {
  // @@protoc_insertion_point(field_list:game.simenv.SimenvConfig.Route.models)
  return models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimenvConfig_Route::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:game.simenv.SimenvConfig.Route.models)
  return &models_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimenvConfig

// string name = 1;
inline void SimenvConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimenvConfig::name() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimenvConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimenvConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimenvConfig.name)
}
inline std::string* SimenvConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimenvConfig.name)
  return _s;
}
inline const std::string& SimenvConfig::_internal_name() const {
  return name_.Get();
}
inline void SimenvConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimenvConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimenvConfig::release_name() {
  // @@protoc_insertion_point(field_release:game.simenv.SimenvConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimenvConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimenvConfig.name)
}

// string args = 2;
inline void SimenvConfig::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& SimenvConfig::args() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimenvConfig.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimenvConfig::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimenvConfig.args)
}
inline std::string* SimenvConfig::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimenvConfig.args)
  return _s;
}
inline const std::string& SimenvConfig::_internal_args() const {
  return args_.Get();
}
inline void SimenvConfig::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimenvConfig::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimenvConfig::release_args() {
  // @@protoc_insertion_point(field_release:game.simenv.SimenvConfig.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimenvConfig::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimenvConfig.args)
}

// map<string, .game.simenv.SimenvConfig.Route> routes = 3;
inline int SimenvConfig::_internal_routes_size() const {
  return routes_.size();
}
inline int SimenvConfig::routes_size() const {
  return _internal_routes_size();
}
inline void SimenvConfig::clear_routes() {
  routes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >&
SimenvConfig::_internal_routes() const {
  return routes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >&
SimenvConfig::routes() const {
  // @@protoc_insertion_point(field_map:game.simenv.SimenvConfig.routes)
  return _internal_routes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >*
SimenvConfig::_internal_mutable_routes() {
  return routes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::game::simenv::SimenvConfig_Route >*
SimenvConfig::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_map:game.simenv.SimenvConfig.routes)
  return _internal_mutable_routes();
}

// -------------------------------------------------------------------

// SimCmd

// string type = 1;
inline void SimCmd::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& SimCmd::type() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimCmd.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimCmd::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimCmd.type)
}
inline std::string* SimCmd::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimCmd.type)
  return _s;
}
inline const std::string& SimCmd::_internal_type() const {
  return type_.Get();
}
inline void SimCmd::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimCmd::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimCmd::release_type() {
  // @@protoc_insertion_point(field_release:game.simenv.SimCmd.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimCmd::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimCmd.type)
}

// string params = 2;
inline void SimCmd::clear_params() {
  params_.ClearToEmpty();
}
inline const std::string& SimCmd::params() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimCmd.params)
  return _internal_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimCmd::set_params(ArgT0&& arg0, ArgT... args) {
 
 params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimCmd.params)
}
inline std::string* SimCmd::mutable_params() {
  std::string* _s = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimCmd.params)
  return _s;
}
inline const std::string& SimCmd::_internal_params() const {
  return params_.Get();
}
inline void SimCmd::_internal_set_params(const std::string& value) {
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimCmd::_internal_mutable_params() {
  
  return params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimCmd::release_params() {
  // @@protoc_insertion_point(field_release:game.simenv.SimCmd.params)
  return params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimCmd::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (params_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimCmd.params)
}

// -------------------------------------------------------------------

// SimInfo

// string state = 1;
inline void SimInfo::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& SimInfo::state() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimInfo::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimInfo.state)
}
inline std::string* SimInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimInfo.state)
  return _s;
}
inline const std::string& SimInfo::_internal_state() const {
  return state_.Get();
}
inline void SimInfo::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimInfo::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimInfo::release_state() {
  // @@protoc_insertion_point(field_release:game.simenv.SimInfo.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimInfo.state)
}

// string data = 2;
inline void SimInfo::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SimInfo::data() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimInfo.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimInfo::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimInfo.data)
}
inline std::string* SimInfo::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimInfo.data)
  return _s;
}
inline const std::string& SimInfo::_internal_data() const {
  return data_.Get();
}
inline void SimInfo::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimInfo::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimInfo::release_data() {
  // @@protoc_insertion_point(field_release:game.simenv.SimInfo.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimInfo::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimInfo.data)
}

// string logs = 3;
inline void SimInfo::clear_logs() {
  logs_.ClearToEmpty();
}
inline const std::string& SimInfo::logs() const {
  // @@protoc_insertion_point(field_get:game.simenv.SimInfo.logs)
  return _internal_logs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimInfo::set_logs(ArgT0&& arg0, ArgT... args) {
 
 logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.simenv.SimInfo.logs)
}
inline std::string* SimInfo::mutable_logs() {
  std::string* _s = _internal_mutable_logs();
  // @@protoc_insertion_point(field_mutable:game.simenv.SimInfo.logs)
  return _s;
}
inline const std::string& SimInfo::_internal_logs() const {
  return logs_.Get();
}
inline void SimInfo::_internal_set_logs(const std::string& value) {
  
  logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimInfo::_internal_mutable_logs() {
  
  return logs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimInfo::release_logs() {
  // @@protoc_insertion_point(field_release:game.simenv.SimInfo.logs)
  return logs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimInfo::set_allocated_logs(std::string* logs) {
  if (logs != nullptr) {
    
  } else {
    
  }
  logs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (logs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    logs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.simenv.SimInfo.logs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simenv
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simenv_2eproto
