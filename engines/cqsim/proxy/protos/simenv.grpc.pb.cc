// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simenv.proto

#include "simenv.pb.h"
#include "simenv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace simenv {

static const char* Simenv_method_names[] = {
  "/game.simenv.Simenv/ResetService",
  "/game.simenv.Simenv/QueryService",
  "/game.simenv.Simenv/GetSimenvConfig",
  "/game.simenv.Simenv/SetSimenvConfig",
  "/game.simenv.Simenv/SimControl",
  "/game.simenv.Simenv/SimMonitor",
  "/game.simenv.Simenv/Call",
};

std::unique_ptr< Simenv::Stub> Simenv::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Simenv::Stub> stub(new Simenv::Stub(channel, options));
  return stub;
}

Simenv::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ResetService_(Simenv_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryService_(Simenv_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSimenvConfig_(Simenv_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimenvConfig_(Simenv_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimControl_(Simenv_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimMonitor_(Simenv_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Call_(Simenv_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Simenv::Stub::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetService_, context, request, response);
}

void Simenv::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, std::move(f));
}

void Simenv::Stub::async::ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryService_, context, request, response);
}

void Simenv::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, std::move(f));
}

void Simenv::Stub::async::QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* Simenv::Stub::PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::ServiceState, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* Simenv::Stub::AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimenvConfig* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::simenv::SimenvConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSimenvConfig_, context, request, response);
}

void Simenv::Stub::async::GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::simenv::SimenvConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimenvConfig_, context, request, response, std::move(f));
}

void Simenv::Stub::async::GetSimenvConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimenvConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>* Simenv::Stub::PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::simenv::SimenvConfig, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSimenvConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::simenv::SimenvConfig>* Simenv::Stub::AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSimenvConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::simenv::SimenvConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSimenvConfig_, context, request, response);
}

void Simenv::Stub::async::SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::simenv::SimenvConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimenvConfig_, context, request, response, std::move(f));
}

void Simenv::Stub::async::SetSimenvConfig(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimenvConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::simenv::SimenvConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSimenvConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::simenv::SimenvConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSimenvConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::game::types::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::simenv::SimCmd, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SimControl_, context, request, response);
}

void Simenv::Stub::async::SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::simenv::SimCmd, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimControl_, context, request, response, std::move(f));
}

void Simenv::Stub::async::SimControl(::grpc::ClientContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CommonResponse, ::game::simenv::SimCmd, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SimControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* Simenv::Stub::AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::simenv::SimCmd& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::simenv::SimInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CommonRequest, ::game::simenv::SimInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SimMonitor_, context, request, response);
}

void Simenv::Stub::async::SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CommonRequest, ::game::simenv::SimInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimMonitor_, context, request, response, std::move(f));
}

void Simenv::Stub::async::SimMonitor(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimMonitor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>* Simenv::Stub::PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::simenv::SimInfo, ::game::types::CommonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SimMonitor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::simenv::SimInfo>* Simenv::Stub::AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimMonitorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Simenv::Stub::Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Call_, context, request, response);
}

void Simenv::Stub::async::Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, std::move(f));
}

void Simenv::Stub::async::Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::types::CallData>* Simenv::Stub::PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Call_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::types::CallData>* Simenv::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

Simenv::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::types::CommonRequest, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::types::CommonResponse* resp) {
               return service->ResetService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::types::CommonRequest, ::game::types::ServiceState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::types::ServiceState* resp) {
               return service->QueryService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::types::CommonRequest, ::game::simenv::SimenvConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::simenv::SimenvConfig* resp) {
               return service->GetSimenvConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::simenv::SimenvConfig, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::simenv::SimenvConfig* req,
             ::game::types::CommonResponse* resp) {
               return service->SetSimenvConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::simenv::SimCmd, ::game::types::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::simenv::SimCmd* req,
             ::game::types::CommonResponse* resp) {
               return service->SimControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::types::CommonRequest, ::game::simenv::SimInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CommonRequest* req,
             ::game::simenv::SimInfo* resp) {
               return service->SimMonitor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simenv_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simenv::Service, ::game::types::CallData, ::game::types::CallData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Simenv::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::types::CallData* req,
             ::game::types::CallData* resp) {
               return service->Call(ctx, req, resp);
             }, this)));
}

Simenv::Service::~Service() {
}

::grpc::Status Simenv::Service::ResetService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::QueryService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::GetSimenvConfig(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimenvConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::SetSimenvConfig(::grpc::ServerContext* context, const ::game::simenv::SimenvConfig* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::SimControl(::grpc::ServerContext* context, const ::game::simenv::SimCmd* request, ::game::types::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::SimMonitor(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::simenv::SimInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Simenv::Service::Call(::grpc::ServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace simenv

