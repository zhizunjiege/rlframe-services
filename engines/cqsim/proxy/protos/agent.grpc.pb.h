// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent.proto
#ifndef GRPC_agent_2eproto__INCLUDED
#define GRPC_agent_2eproto__INCLUDED

#include "agent.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace agent {

class Agent final {
 public:
  static constexpr char const* service_full_name() {
    return "game.agent.Agent";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // reset agent service state
    virtual ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    // query agent service state
    virtual ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>> AsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    // get agent configs
    virtual ::grpc::Status GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>> AsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>>(AsyncGetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>> PrepareAsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>>(PrepareAsyncGetAgentConfigRaw(context, request, cq));
    }
    // set agent configs
    virtual ::grpc::Status SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetAgentConfigRaw(context, request, cq));
    }
    // get agent mode
    virtual ::grpc::Status GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentMode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>> AsyncGetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>>(AsyncGetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>> PrepareAsyncGetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>>(PrepareAsyncGetAgentModeRaw(context, request, cq));
    }
    // set agent mode
    virtual ::grpc::Status SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetAgentModeRaw(context, request, cq));
    }
    // get model weights
    virtual ::grpc::Status GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelWeights* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>> AsyncGetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>>(AsyncGetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>> PrepareAsyncGetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>>(PrepareAsyncGetModelWeightsRaw(context, request, cq));
    }
    // set model weights
    virtual ::grpc::Status SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelWeightsRaw(context, request, cq));
    }
    // get model buffer
    virtual ::grpc::Status GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelBuffer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>> AsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>>(AsyncGetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>> PrepareAsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>>(PrepareAsyncGetModelBufferRaw(context, request, cq));
    }
    // set model buffer
    virtual ::grpc::Status SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelBufferRaw(context, request, cq));
    }
    // get model status
    virtual ::grpc::Status GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>> AsyncGetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>>(AsyncGetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>> PrepareAsyncGetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>>(PrepareAsyncGetModelStatusRaw(context, request, cq));
    }
    // set model status
    virtual ::grpc::Status SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelStatusRaw(context, request, cq));
    }
    // get action
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>> GetAction(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>>(GetActionRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>> AsyncGetAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>>(AsyncGetActionRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>> PrepareAsyncGetAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>>(PrepareAsyncGetActionRaw(context, cq));
    }
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>> AsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // reset agent service state
      virtual void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // query agent service state
      virtual void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get agent configs
      virtual void GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set agent configs
      virtual void SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get agent mode
      virtual void GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set agent mode
      virtual void SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model weights
      virtual void GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model weights
      virtual void SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model buffer
      virtual void GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model buffer
      virtual void SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model status
      virtual void GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model status
      virtual void SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get action
      virtual void GetAction(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::types::SimState,::game::types::SimAction>* reactor) = 0;
      // any rpc call
      virtual void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::ServiceState>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>* AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentConfig>* PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>* AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::AgentMode>* PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>* AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelWeights>* PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>* AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelBuffer>* PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>* AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::agent::ModelStatus>* PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>* GetActionRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>* AsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::types::SimState, ::game::types::SimAction>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CallData>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::ServiceState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>> AsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    ::grpc::Status GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>> AsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>>(AsyncGetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>> PrepareAsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>>(PrepareAsyncGetAgentConfigRaw(context, request, cq));
    }
    ::grpc::Status SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetAgentConfigRaw(context, request, cq));
    }
    ::grpc::Status GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::AgentMode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>> AsyncGetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>>(AsyncGetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>> PrepareAsyncGetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>>(PrepareAsyncGetAgentModeRaw(context, request, cq));
    }
    ::grpc::Status SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetAgentModeRaw(context, request, cq));
    }
    ::grpc::Status GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelWeights* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>> AsyncGetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>>(AsyncGetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>> PrepareAsyncGetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>>(PrepareAsyncGetModelWeightsRaw(context, request, cq));
    }
    ::grpc::Status SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelWeightsRaw(context, request, cq));
    }
    ::grpc::Status GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelBuffer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>> AsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>>(AsyncGetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>> PrepareAsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>>(PrepareAsyncGetModelBufferRaw(context, request, cq));
    }
    ::grpc::Status SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelBufferRaw(context, request, cq));
    }
    ::grpc::Status GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::agent::ModelStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>> AsyncGetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>>(AsyncGetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>> PrepareAsyncGetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>>(PrepareAsyncGetModelStatusRaw(context, request, cq));
    }
    ::grpc::Status SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::game::types::SimState, ::game::types::SimAction>> GetAction(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::game::types::SimState, ::game::types::SimAction>>(GetActionRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>> AsyncGetAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>>(AsyncGetActionRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>> PrepareAsyncGetAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>>(PrepareAsyncGetActionRaw(context, cq));
    }
    ::grpc::Status Call(::grpc::ClientContext* context, const ::game::types::CallData& request, ::game::types::CallData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>> AsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CallData>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, std::function<void(::grpc::Status)>) override;
      void QueryService(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, std::function<void(::grpc::Status)>) override;
      void GetAgentConfig(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAgentConfig(::grpc::ClientContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, std::function<void(::grpc::Status)>) override;
      void GetAgentMode(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAgentMode(::grpc::ClientContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, std::function<void(::grpc::Status)>) override;
      void GetModelWeights(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelWeights(::grpc::ClientContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, std::function<void(::grpc::Status)>) override;
      void GetModelBuffer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelBuffer(::grpc::ClientContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, std::function<void(::grpc::Status)>) override;
      void GetModelStatus(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelStatus(::grpc::ClientContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAction(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::types::SimState,::game::types::SimAction>* reactor) override;
      void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, std::function<void(::grpc::Status)>) override;
      void Call(::grpc::ClientContext* context, const ::game::types::CallData* request, ::game::types::CallData* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::ServiceState>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>* AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::AgentConfig>* PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::agent::AgentConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>* AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::AgentMode>* PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::agent::AgentMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>* AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelWeights>* PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::agent::ModelWeights& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>* AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelBuffer>* PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::agent::ModelBuffer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>* AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::agent::ModelStatus>* PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::agent::ModelStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::game::types::SimState, ::game::types::SimAction>* GetActionRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>* AsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::game::types::SimState, ::game::types::SimAction>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CallData>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CallData>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::types::CallData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ResetService_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgentConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgentConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgentMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgentMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelBuffer_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelBuffer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAction_;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // reset agent service state
    virtual ::grpc::Status ResetService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response);
    // query agent service state
    virtual ::grpc::Status QueryService(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response);
    // get agent configs
    virtual ::grpc::Status GetAgentConfig(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response);
    // set agent configs
    virtual ::grpc::Status SetAgentConfig(::grpc::ServerContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response);
    // get agent mode
    virtual ::grpc::Status GetAgentMode(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response);
    // set agent mode
    virtual ::grpc::Status SetAgentMode(::grpc::ServerContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response);
    // get model weights
    virtual ::grpc::Status GetModelWeights(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response);
    // set model weights
    virtual ::grpc::Status SetModelWeights(::grpc::ServerContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response);
    // get model buffer
    virtual ::grpc::Status GetModelBuffer(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response);
    // set model buffer
    virtual ::grpc::Status SetModelBuffer(::grpc::ServerContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response);
    // get model status
    virtual ::grpc::Status GetModelStatus(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response);
    // set model status
    virtual ::grpc::Status SetModelStatus(::grpc::ServerContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response);
    // get action
    virtual ::grpc::Status GetAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* stream);
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::types::ServiceState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentConfig(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::agent::AgentConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfig(::grpc::ServerContext* context, ::game::agent::AgentConfig* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentMode(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::agent::AgentMode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentMode(::grpc::ServerContext* context, ::game::agent::AgentMode* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelWeights(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::agent::ModelWeights>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelWeights(::grpc::ServerContext* context, ::game::agent::ModelWeights* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelBuffer(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::agent::ModelBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelBuffer(::grpc::ServerContext* context, ::game::agent::ModelBuffer* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelStatus(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::agent::ModelStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelStatus(::grpc::ServerContext* context, ::game::agent::ModelStatus* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAction() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::game::types::SimAction, ::game::types::SimState>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(12, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::game::types::CallData* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CallData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetService<WithAsyncMethod_QueryService<WithAsyncMethod_GetAgentConfig<WithAsyncMethod_SetAgentConfig<WithAsyncMethod_GetAgentMode<WithAsyncMethod_SetAgentMode<WithAsyncMethod_GetModelWeights<WithAsyncMethod_SetModelWeights<WithAsyncMethod_GetModelBuffer<WithAsyncMethod_SetModelBuffer<WithAsyncMethod_GetModelStatus<WithAsyncMethod_SetModelStatus<WithAsyncMethod_GetAction<WithAsyncMethod_Call<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) { return this->ResetService(context, request, response); }));}
    void SetMessageAllocatorFor_ResetService(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::ServiceState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::types::ServiceState* response) { return this->QueryService(context, request, response); }));}
    void SetMessageAllocatorFor_QueryService(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::types::ServiceState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::ServiceState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::AgentConfig>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentConfig* response) { return this->GetAgentConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgentConfig(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::agent::AgentConfig>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::AgentConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::agent::AgentConfig, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::agent::AgentConfig* request, ::game::types::CommonResponse* response) { return this->SetAgentConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgentConfig(
        ::grpc::MessageAllocator< ::game::agent::AgentConfig, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::agent::AgentConfig, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::AgentMode>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::AgentMode* response) { return this->GetAgentMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgentMode(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::agent::AgentMode>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::AgentMode>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::game::agent::AgentMode, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::agent::AgentMode* request, ::game::types::CommonResponse* response) { return this->SetAgentMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgentMode(
        ::grpc::MessageAllocator< ::game::agent::AgentMode, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::agent::AgentMode, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelWeights>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelWeights* response) { return this->GetModelWeights(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelWeights(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::agent::ModelWeights>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelWeights>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelWeights, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::agent::ModelWeights* request, ::game::types::CommonResponse* response) { return this->SetModelWeights(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelWeights(
        ::grpc::MessageAllocator< ::game::agent::ModelWeights, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelWeights, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelBuffer* response) { return this->GetModelBuffer(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelBuffer(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::agent::ModelBuffer>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelBuffer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelBuffer, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::agent::ModelBuffer* request, ::game::types::CommonResponse* response) { return this->SetModelBuffer(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelBuffer(
        ::grpc::MessageAllocator< ::game::agent::ModelBuffer, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelBuffer, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::agent::ModelStatus* response) { return this->GetModelStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelStatus(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::agent::ModelStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::agent::ModelStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelStatus, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::agent::ModelStatus* request, ::game::types::CommonResponse* response) { return this->SetModelStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelStatus(
        ::grpc::MessageAllocator< ::game::agent::ModelStatus, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::agent::ModelStatus, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAction() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackBidiHandler< ::game::types::SimState, ::game::types::SimAction>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetAction(context); }));
    }
    ~WithCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::game::types::SimState, ::game::types::SimAction>* GetAction(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Call() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CallData, ::game::types::CallData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CallData* request, ::game::types::CallData* response) { return this->Call(context, request, response); }));}
    void SetMessageAllocatorFor_Call(
        ::grpc::MessageAllocator< ::game::types::CallData, ::game::types::CallData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CallData, ::game::types::CallData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ResetService<WithCallbackMethod_QueryService<WithCallbackMethod_GetAgentConfig<WithCallbackMethod_SetAgentConfig<WithCallbackMethod_GetAgentMode<WithCallbackMethod_SetAgentMode<WithCallbackMethod_GetModelWeights<WithCallbackMethod_SetModelWeights<WithCallbackMethod_GetModelBuffer<WithCallbackMethod_SetModelBuffer<WithCallbackMethod_GetModelStatus<WithCallbackMethod_SetModelStatus<WithCallbackMethod_GetAction<WithCallbackMethod_Call<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAction() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelBuffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelBuffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAction() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(12, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetService(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryService(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgentConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgentConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgentMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgentMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelBuffer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelBuffer(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAction() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetAction(context); }));
    }
    ~WithRawCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::types::SimAction, ::game::types::SimState>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetAction(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Call() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Call(context, request, response); }));
    }
    ~WithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedResetService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::types::ServiceState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::types::ServiceState>* streamer) {
                       return this->StreamedQueryService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::ServiceState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::types::ServiceState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::agent::AgentConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::agent::AgentConfig>* streamer) {
                       return this->StreamedGetAgentConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgentConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::agent::AgentConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::agent::AgentConfig, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::agent::AgentConfig, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetAgentConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::agent::AgentConfig* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgentConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::agent::AgentConfig,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::agent::AgentMode>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::agent::AgentMode>* streamer) {
                       return this->StreamedGetAgentMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::AgentMode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgentMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::agent::AgentMode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::agent::AgentMode, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::agent::AgentMode, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetAgentMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::agent::AgentMode* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgentMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::agent::AgentMode,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::agent::ModelWeights>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::agent::ModelWeights>* streamer) {
                       return this->StreamedGetModelWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelWeights* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::agent::ModelWeights>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::agent::ModelWeights, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::agent::ModelWeights, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::agent::ModelWeights* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::agent::ModelWeights,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::agent::ModelBuffer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::agent::ModelBuffer>* streamer) {
                       return this->StreamedGetModelBuffer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelBuffer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelBuffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::agent::ModelBuffer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::agent::ModelBuffer, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::agent::ModelBuffer, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelBuffer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::agent::ModelBuffer* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelBuffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::agent::ModelBuffer,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::agent::ModelStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::agent::ModelStatus>* streamer) {
                       return this->StreamedGetModelStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::agent::ModelStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::agent::ModelStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::agent::ModelStatus, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::agent::ModelStatus, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::agent::ModelStatus* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::agent::ModelStatus,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CallData, ::game::types::CallData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CallData, ::game::types::CallData>* streamer) {
                       return this->StreamedCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::types::CallData* /*request*/, ::game::types::CallData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CallData,::game::types::CallData>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetAgentConfig<WithStreamedUnaryMethod_SetAgentConfig<WithStreamedUnaryMethod_GetAgentMode<WithStreamedUnaryMethod_SetAgentMode<WithStreamedUnaryMethod_GetModelWeights<WithStreamedUnaryMethod_SetModelWeights<WithStreamedUnaryMethod_GetModelBuffer<WithStreamedUnaryMethod_SetModelBuffer<WithStreamedUnaryMethod_GetModelStatus<WithStreamedUnaryMethod_SetModelStatus<WithStreamedUnaryMethod_Call<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetAgentConfig<WithStreamedUnaryMethod_SetAgentConfig<WithStreamedUnaryMethod_GetAgentMode<WithStreamedUnaryMethod_SetAgentMode<WithStreamedUnaryMethod_GetModelWeights<WithStreamedUnaryMethod_SetModelWeights<WithStreamedUnaryMethod_GetModelBuffer<WithStreamedUnaryMethod_SetModelBuffer<WithStreamedUnaryMethod_GetModelStatus<WithStreamedUnaryMethod_SetModelStatus<WithStreamedUnaryMethod_Call<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace agent
}  // namespace game


#endif  // GRPC_agent_2eproto__INCLUDED
