// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bff.proto
#ifndef GRPC_bff_2eproto__INCLUDED
#define GRPC_bff_2eproto__INCLUDED

#include "bff.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace bff {

class BFF final {
 public:
  static constexpr char const* service_full_name() {
    return "game.bff.BFF";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // reset bff server
    virtual ::grpc::Status ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncResetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncResetServerRaw(context, request, cq));
    }
    // register services
    virtual ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    // unregister services
    virtual ::grpc::Status UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncUnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncUnRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncUnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncUnRegisterServiceRaw(context, request, cq));
    }
    // get services info
    virtual ::grpc::Status GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceInfoMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>> AsyncGetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>>(AsyncGetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>> PrepareAsyncGetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>>(PrepareAsyncGetServiceInfoRaw(context, request, cq));
    }
    // set services info
    virtual ::grpc::Status SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetServiceInfoRaw(context, request, cq));
    }
    // reset simenv/agent services state
    virtual ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    // start simenv/agent services state
    virtual ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceStateMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>> AsyncQueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    // get simenv configs
    virtual ::grpc::Status GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimenvConfigMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>> AsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>>(AsyncGetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>> PrepareAsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>>(PrepareAsyncGetSimenvConfigRaw(context, request, cq));
    }
    // set simenv configs
    virtual ::grpc::Status SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetSimenvConfigRaw(context, request, cq));
    }
    // control simenv
    virtual ::grpc::Status SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSimControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSimControlRaw(context, request, cq));
    }
    // get simenv info
    virtual ::grpc::Status SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimInfoMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>> AsyncSimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>>(AsyncSimMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>> PrepareAsyncSimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>>(PrepareAsyncSimMonitorRaw(context, request, cq));
    }
    // get agent configs
    virtual ::grpc::Status GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentConfigMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>> AsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>>(AsyncGetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>> PrepareAsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>>(PrepareAsyncGetAgentConfigRaw(context, request, cq));
    }
    // set agent configs
    virtual ::grpc::Status SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetAgentConfigRaw(context, request, cq));
    }
    // get agent mode
    virtual ::grpc::Status GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentModeMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>> AsyncGetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>>(AsyncGetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>> PrepareAsyncGetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>>(PrepareAsyncGetAgentModeRaw(context, request, cq));
    }
    // set agent mode
    virtual ::grpc::Status SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetAgentModeRaw(context, request, cq));
    }
    // get model weights
    virtual ::grpc::Status GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelWeightsMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>> AsyncGetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>>(AsyncGetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>> PrepareAsyncGetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>>(PrepareAsyncGetModelWeightsRaw(context, request, cq));
    }
    // set model weights
    virtual ::grpc::Status SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelWeightsRaw(context, request, cq));
    }
    // get model buffer
    virtual ::grpc::Status GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelBufferMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>> AsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>>(AsyncGetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>> PrepareAsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>>(PrepareAsyncGetModelBufferRaw(context, request, cq));
    }
    // set model buffer
    virtual ::grpc::Status SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelBufferRaw(context, request, cq));
    }
    // get model status
    virtual ::grpc::Status GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelStatusMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>> AsyncGetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>>(AsyncGetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>> PrepareAsyncGetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>>(PrepareAsyncGetModelStatusRaw(context, request, cq));
    }
    // set model status
    virtual ::grpc::Status SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::game::types::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> AsyncSetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(AsyncSetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>> PrepareAsyncSetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>>(PrepareAsyncSetModelStatusRaw(context, request, cq));
    }
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::game::bff::CallDataMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>> AsyncCall(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // reset bff server
      virtual void ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // register services
      virtual void RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // unregister services
      virtual void UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get services info
      virtual void GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set services info
      virtual void SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // reset simenv/agent services state
      virtual void ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // start simenv/agent services state
      virtual void QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get simenv configs
      virtual void GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set simenv configs
      virtual void SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // control simenv
      virtual void SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get simenv info
      virtual void SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get agent configs
      virtual void GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set agent configs
      virtual void SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get agent mode
      virtual void GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set agent mode
      virtual void SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model weights
      virtual void GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model weights
      virtual void SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model buffer
      virtual void GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model buffer
      virtual void SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get model status
      virtual void GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set model status
      virtual void SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // any rpc call
      virtual void Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>* AsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceInfoMap>* PrepareAsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ServiceStateMap>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>* AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimenvConfigMap>* PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>* AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::SimInfoMap>* PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>* AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentConfigMap>* PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>* AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::AgentModeMap>* PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>* AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelWeightsMap>* PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>* AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelBufferMap>* PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>* AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::ModelStatusMap>* PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::types::CommonResponse>* PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::bff::CallDataMap>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncResetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncResetServerRaw(context, request, cq));
    }
    ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncUnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncUnRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncUnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncUnRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceInfoMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>> AsyncGetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>>(AsyncGetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>> PrepareAsyncGetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>>(PrepareAsyncGetServiceInfoRaw(context, request, cq));
    }
    ::grpc::Status SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetServiceInfoRaw(context, request, cq));
    }
    ::grpc::Status ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncResetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncResetServiceRaw(context, request, cq));
    }
    ::grpc::Status QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ServiceStateMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>> AsyncQueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>>(AsyncQueryServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>> PrepareAsyncQueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>>(PrepareAsyncQueryServiceRaw(context, request, cq));
    }
    ::grpc::Status GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimenvConfigMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>> AsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>>(AsyncGetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>> PrepareAsyncGetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>>(PrepareAsyncGetSimenvConfigRaw(context, request, cq));
    }
    ::grpc::Status SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetSimenvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetSimenvConfigRaw(context, request, cq));
    }
    ::grpc::Status SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSimControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSimControlRaw(context, request, cq));
    }
    ::grpc::Status SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::SimInfoMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>> AsyncSimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>>(AsyncSimMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>> PrepareAsyncSimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>>(PrepareAsyncSimMonitorRaw(context, request, cq));
    }
    ::grpc::Status GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentConfigMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>> AsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>>(AsyncGetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>> PrepareAsyncGetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>>(PrepareAsyncGetAgentConfigRaw(context, request, cq));
    }
    ::grpc::Status SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetAgentConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetAgentConfigRaw(context, request, cq));
    }
    ::grpc::Status GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::AgentModeMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>> AsyncGetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>>(AsyncGetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>> PrepareAsyncGetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>>(PrepareAsyncGetAgentModeRaw(context, request, cq));
    }
    ::grpc::Status SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetAgentModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetAgentModeRaw(context, request, cq));
    }
    ::grpc::Status GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelWeightsMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>> AsyncGetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>>(AsyncGetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>> PrepareAsyncGetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>>(PrepareAsyncGetModelWeightsRaw(context, request, cq));
    }
    ::grpc::Status SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelWeightsRaw(context, request, cq));
    }
    ::grpc::Status GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelBufferMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>> AsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>>(AsyncGetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>> PrepareAsyncGetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>>(PrepareAsyncGetModelBufferRaw(context, request, cq));
    }
    ::grpc::Status SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelBufferRaw(context, request, cq));
    }
    ::grpc::Status GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::game::bff::ModelStatusMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>> AsyncGetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>>(AsyncGetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>> PrepareAsyncGetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>>(PrepareAsyncGetModelStatusRaw(context, request, cq));
    }
    ::grpc::Status SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::game::types::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> AsyncSetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(AsyncSetModelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>> PrepareAsyncSetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>>(PrepareAsyncSetModelStatusRaw(context, request, cq));
    }
    ::grpc::Status Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::game::bff::CallDataMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>> AsyncCall(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>> PrepareAsyncCall(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>>(PrepareAsyncCallRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetServer(::grpc::ClientContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void UnRegisterService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, std::function<void(::grpc::Status)>) override;
      void GetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetServiceInfo(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, std::function<void(::grpc::Status)>) override;
      void QueryService(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, std::function<void(::grpc::Status)>) override;
      void GetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetSimenvConfig(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SimControl(::grpc::ClientContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, std::function<void(::grpc::Status)>) override;
      void SimMonitor(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, std::function<void(::grpc::Status)>) override;
      void GetAgentConfig(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAgentConfig(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, std::function<void(::grpc::Status)>) override;
      void GetAgentMode(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAgentMode(::grpc::ClientContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, std::function<void(::grpc::Status)>) override;
      void GetModelWeights(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelWeights(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, std::function<void(::grpc::Status)>) override;
      void GetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelBuffer(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, std::function<void(::grpc::Status)>) override;
      void GetModelStatus(::grpc::ClientContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void SetModelStatus(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, std::function<void(::grpc::Status)>) override;
      void Call(::grpc::ClientContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncResetServerRaw(::grpc::ClientContext* context, const ::game::types::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncUnRegisterServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>* AsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceInfoMap>* PrepareAsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetServiceInfoRaw(::grpc::ClientContext* context, const ::game::bff::ServiceInfoMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncResetServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>* AsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ServiceStateMap>* PrepareAsyncQueryServiceRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>* AsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::SimenvConfigMap>* PrepareAsyncGetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetSimenvConfigRaw(::grpc::ClientContext* context, const ::game::bff::SimenvConfigMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSimControlRaw(::grpc::ClientContext* context, const ::game::bff::SimCmdMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>* AsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::SimInfoMap>* PrepareAsyncSimMonitorRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>* AsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::AgentConfigMap>* PrepareAsyncGetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetAgentConfigRaw(::grpc::ClientContext* context, const ::game::bff::AgentConfigMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>* AsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::AgentModeMap>* PrepareAsyncGetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetAgentModeRaw(::grpc::ClientContext* context, const ::game::bff::AgentModeMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>* AsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelWeightsMap>* PrepareAsyncGetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelWeightsRaw(::grpc::ClientContext* context, const ::game::bff::ModelWeightsMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>* AsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelBufferMap>* PrepareAsyncGetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelBufferRaw(::grpc::ClientContext* context, const ::game::bff::ModelBufferMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>* AsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::ModelStatusMap>* PrepareAsyncGetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ServiceIdList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* AsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::types::CommonResponse>* PrepareAsyncSetModelStatusRaw(::grpc::ClientContext* context, const ::game::bff::ModelStatusMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>* AsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::bff::CallDataMap>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::game::bff::CallDataMap& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ResetServer_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_UnRegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SetServiceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetService_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSimenvConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSimenvConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SimControl_;
    const ::grpc::internal::RpcMethod rpcmethod_SimMonitor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgentConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgentConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgentMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgentMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelBuffer_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelBuffer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetModelStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // reset bff server
    virtual ::grpc::Status ResetServer(::grpc::ServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response);
    // register services
    virtual ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response);
    // unregister services
    virtual ::grpc::Status UnRegisterService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response);
    // get services info
    virtual ::grpc::Status GetServiceInfo(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response);
    // set services info
    virtual ::grpc::Status SetServiceInfo(::grpc::ServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response);
    // reset simenv/agent services state
    virtual ::grpc::Status ResetService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response);
    // start simenv/agent services state
    virtual ::grpc::Status QueryService(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response);
    // get simenv configs
    virtual ::grpc::Status GetSimenvConfig(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response);
    // set simenv configs
    virtual ::grpc::Status SetSimenvConfig(::grpc::ServerContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response);
    // control simenv
    virtual ::grpc::Status SimControl(::grpc::ServerContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response);
    // get simenv info
    virtual ::grpc::Status SimMonitor(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response);
    // get agent configs
    virtual ::grpc::Status GetAgentConfig(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response);
    // set agent configs
    virtual ::grpc::Status SetAgentConfig(::grpc::ServerContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response);
    // get agent mode
    virtual ::grpc::Status GetAgentMode(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response);
    // set agent mode
    virtual ::grpc::Status SetAgentMode(::grpc::ServerContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response);
    // get model weights
    virtual ::grpc::Status GetModelWeights(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response);
    // set model weights
    virtual ::grpc::Status SetModelWeights(::grpc::ServerContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response);
    // get model buffer
    virtual ::grpc::Status GetModelBuffer(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response);
    // set model buffer
    virtual ::grpc::Status SetModelBuffer(::grpc::ServerContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response);
    // get model status
    virtual ::grpc::Status GetModelStatus(::grpc::ServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response);
    // set model status
    virtual ::grpc::Status SetModelStatus(::grpc::ServerContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response);
    // any rpc call
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetServer(::grpc::ServerContext* context, ::game::types::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::game::bff::ServiceInfoMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnRegisterService(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceInfo(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::ServiceInfoMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServiceInfo(::grpc::ServerContext* context, ::game::bff::ServiceInfoMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetService() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryService() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::ServiceStateMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSimenvConfig(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::SimenvConfigMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSimenvConfig(::grpc::ServerContext* context, ::game::bff::SimenvConfigMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SimControl() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimControl(::grpc::ServerContext* context, ::game::bff::SimCmdMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SimMonitor() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimMonitor(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::SimInfoMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentConfig(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::AgentConfigMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfig(::grpc::ServerContext* context, ::game::bff::AgentConfigMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentMode(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::AgentModeMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentMode(::grpc::ServerContext* context, ::game::bff::AgentModeMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelWeights(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::ModelWeightsMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelWeights(::grpc::ServerContext* context, ::game::bff::ModelWeightsMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelBuffer(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::ModelBufferMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelBuffer(::grpc::ServerContext* context, ::game::bff::ModelBufferMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelStatus(::grpc::ServerContext* context, ::game::bff::ServiceIdList* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::ModelStatusMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelStatus(::grpc::ServerContext* context, ::game::bff::ModelStatusMap* request, ::grpc::ServerAsyncResponseWriter< ::game::types::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::game::bff::CallDataMap* request, ::grpc::ServerAsyncResponseWriter< ::game::bff::CallDataMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetServer<WithAsyncMethod_RegisterService<WithAsyncMethod_UnRegisterService<WithAsyncMethod_GetServiceInfo<WithAsyncMethod_SetServiceInfo<WithAsyncMethod_ResetService<WithAsyncMethod_QueryService<WithAsyncMethod_GetSimenvConfig<WithAsyncMethod_SetSimenvConfig<WithAsyncMethod_SimControl<WithAsyncMethod_SimMonitor<WithAsyncMethod_GetAgentConfig<WithAsyncMethod_SetAgentConfig<WithAsyncMethod_GetAgentMode<WithAsyncMethod_SetAgentMode<WithAsyncMethod_GetModelWeights<WithAsyncMethod_SetModelWeights<WithAsyncMethod_GetModelBuffer<WithAsyncMethod_SetModelBuffer<WithAsyncMethod_GetModelStatus<WithAsyncMethod_SetModelStatus<WithAsyncMethod_Call<Service > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetServer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::types::CommonRequest* request, ::game::types::CommonResponse* response) { return this->ResetServer(context, request, response); }));}
    void SetMessageAllocatorFor_ResetServer(
        ::grpc::MessageAllocator< ::game::types::CommonRequest, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::types::CommonRequest, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterService() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response) { return this->RegisterService(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterService(
        ::grpc::MessageAllocator< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response) { return this->UnRegisterService(context, request, response); }));}
    void SetMessageAllocatorFor_UnRegisterService(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnRegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceInfoMap* response) { return this->GetServiceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceInfo(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceInfoMap* request, ::game::types::CommonResponse* response) { return this->SetServiceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SetServiceInfo(
        ::grpc::MessageAllocator< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::types::CommonResponse* response) { return this->ResetService(context, request, response); }));}
    void SetMessageAllocatorFor_ResetService(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ServiceStateMap* response) { return this->QueryService(context, request, response); }));}
    void SetMessageAllocatorFor_QueryService(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimenvConfigMap* response) { return this->GetSimenvConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetSimenvConfig(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::SimenvConfigMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::SimenvConfigMap* request, ::game::types::CommonResponse* response) { return this->SetSimenvConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetSimenvConfig(
        ::grpc::MessageAllocator< ::game::bff::SimenvConfigMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::SimenvConfigMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SimControl() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::SimCmdMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::SimCmdMap* request, ::game::types::CommonResponse* response) { return this->SimControl(context, request, response); }));}
    void SetMessageAllocatorFor_SimControl(
        ::grpc::MessageAllocator< ::game::bff::SimCmdMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::SimCmdMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimControl(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SimMonitor() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::SimInfoMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::SimInfoMap* response) { return this->SimMonitor(context, request, response); }));}
    void SetMessageAllocatorFor_SimMonitor(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::SimInfoMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::SimInfoMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentConfigMap* response) { return this->GetAgentConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgentConfig(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::AgentConfigMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::AgentConfigMap* request, ::game::types::CommonResponse* response) { return this->SetAgentConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgentConfig(
        ::grpc::MessageAllocator< ::game::bff::AgentConfigMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::AgentConfigMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::AgentModeMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::AgentModeMap* response) { return this->GetAgentMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgentMode(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::AgentModeMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::AgentModeMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::AgentModeMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::AgentModeMap* request, ::game::types::CommonResponse* response) { return this->SetAgentMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgentMode(
        ::grpc::MessageAllocator< ::game::bff::AgentModeMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::AgentModeMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelWeightsMap* response) { return this->GetModelWeights(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelWeights(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelWeightsMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ModelWeightsMap* request, ::game::types::CommonResponse* response) { return this->SetModelWeights(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelWeights(
        ::grpc::MessageAllocator< ::game::bff::ModelWeightsMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelWeightsMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelBufferMap* response) { return this->GetModelBuffer(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelBuffer(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelBufferMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ModelBufferMap* request, ::game::types::CommonResponse* response) { return this->SetModelBuffer(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelBuffer(
        ::grpc::MessageAllocator< ::game::bff::ModelBufferMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelBufferMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ServiceIdList* request, ::game::bff::ModelStatusMap* response) { return this->GetModelStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelStatus(
        ::grpc::MessageAllocator< ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelStatusMap, ::game::types::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::ModelStatusMap* request, ::game::types::CommonResponse* response) { return this->SetModelStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetModelStatus(
        ::grpc::MessageAllocator< ::game::bff::ModelStatusMap, ::game::types::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::ModelStatusMap, ::game::types::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Call() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::game::bff::CallDataMap, ::game::bff::CallDataMap>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::bff::CallDataMap* request, ::game::bff::CallDataMap* response) { return this->Call(context, request, response); }));}
    void SetMessageAllocatorFor_Call(
        ::grpc::MessageAllocator< ::game::bff::CallDataMap, ::game::bff::CallDataMap>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::bff::CallDataMap, ::game::bff::CallDataMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ResetServer<WithCallbackMethod_RegisterService<WithCallbackMethod_UnRegisterService<WithCallbackMethod_GetServiceInfo<WithCallbackMethod_SetServiceInfo<WithCallbackMethod_ResetService<WithCallbackMethod_QueryService<WithCallbackMethod_GetSimenvConfig<WithCallbackMethod_SetSimenvConfig<WithCallbackMethod_SimControl<WithCallbackMethod_SimMonitor<WithCallbackMethod_GetAgentConfig<WithCallbackMethod_SetAgentConfig<WithCallbackMethod_GetAgentMode<WithCallbackMethod_SetAgentMode<WithCallbackMethod_GetModelWeights<WithCallbackMethod_SetModelWeights<WithCallbackMethod_GetModelBuffer<WithCallbackMethod_SetModelBuffer<WithCallbackMethod_GetModelStatus<WithCallbackMethod_SetModelStatus<WithCallbackMethod_Call<Service > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetService() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryService() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SimControl() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SimMonitor() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnRegisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServiceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetService() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryService() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSimenvConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSimenvConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SimControl() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SimMonitor() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimMonitor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelBuffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelBuffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetModelStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetServer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterService() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterService(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnRegisterService(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnRegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetServiceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetService() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetService(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryService() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryService(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSimenvConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSimenvConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSimenvConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SimControl() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SimControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SimMonitor() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SimMonitor(context, request, response); }));
    }
    ~WithRawCallbackMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SimMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgentConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgentConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgentMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgentMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAgentMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelBuffer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelBuffer(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetModelStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetModelStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Call() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Call(context, request, response); }));
    }
    ~WithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::types::CommonRequest, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::types::CommonRequest, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedResetServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetServer(::grpc::ServerContext* /*context*/, const ::game::types::CommonRequest* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::types::CommonRequest,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedRegisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceInfoMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnRegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnRegisterService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedUnRegisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnRegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnRegisterService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::ServiceInfoMap>* streamer) {
                       return this->StreamedGetServiceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::ServiceInfoMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetServiceInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceInfoMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetServiceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetServiceInfo(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceInfoMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetServiceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceInfoMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetService() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedResetService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryService() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::ServiceStateMap>* streamer) {
                       return this->StreamedQueryService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryService(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ServiceStateMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::ServiceStateMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSimenvConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::SimenvConfigMap>* streamer) {
                       return this->StreamedGetSimenvConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimenvConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSimenvConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::SimenvConfigMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSimenvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSimenvConfig() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::SimenvConfigMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::SimenvConfigMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetSimenvConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSimenvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSimenvConfig(::grpc::ServerContext* /*context*/, const ::game::bff::SimenvConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSimenvConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::SimenvConfigMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SimControl() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::SimCmdMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::SimCmdMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSimControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SimControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimControl(::grpc::ServerContext* /*context*/, const ::game::bff::SimCmdMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::SimCmdMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SimMonitor() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::SimInfoMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::SimInfoMap>* streamer) {
                       return this->StreamedSimMonitor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SimMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimMonitor(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::SimInfoMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimMonitor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::SimInfoMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgentConfig() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::AgentConfigMap>* streamer) {
                       return this->StreamedGetAgentConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentConfigMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgentConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::AgentConfigMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgentConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgentConfig() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::AgentConfigMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::AgentConfigMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetAgentConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgentConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgentConfig(::grpc::ServerContext* /*context*/, const ::game::bff::AgentConfigMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgentConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::AgentConfigMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgentMode() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::AgentModeMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::AgentModeMap>* streamer) {
                       return this->StreamedGetAgentMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::AgentModeMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgentMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::AgentModeMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgentMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgentMode() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::AgentModeMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::AgentModeMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetAgentMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgentMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgentMode(::grpc::ServerContext* /*context*/, const ::game::bff::AgentModeMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgentMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::AgentModeMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelWeights() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::ModelWeightsMap>* streamer) {
                       return this->StreamedGetModelWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelWeightsMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::ModelWeightsMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelWeights() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ModelWeightsMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ModelWeightsMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelWeights(::grpc::ServerContext* /*context*/, const ::game::bff::ModelWeightsMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ModelWeightsMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelBuffer() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::ModelBufferMap>* streamer) {
                       return this->StreamedGetModelBuffer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelBufferMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelBuffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::ModelBufferMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelBuffer() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ModelBufferMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ModelBufferMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelBuffer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelBuffer(::grpc::ServerContext* /*context*/, const ::game::bff::ModelBufferMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelBuffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ModelBufferMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelStatus() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ServiceIdList, ::game::bff::ModelStatusMap>* streamer) {
                       return this->StreamedGetModelStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ServiceIdList* /*request*/, ::game::bff::ModelStatusMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ServiceIdList,::game::bff::ModelStatusMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetModelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetModelStatus() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::ModelStatusMap, ::game::types::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::ModelStatusMap, ::game::types::CommonResponse>* streamer) {
                       return this->StreamedSetModelStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetModelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetModelStatus(::grpc::ServerContext* /*context*/, const ::game::bff::ModelStatusMap* /*request*/, ::game::types::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetModelStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::ModelStatusMap,::game::types::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::bff::CallDataMap, ::game::bff::CallDataMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::bff::CallDataMap, ::game::bff::CallDataMap>* streamer) {
                       return this->StreamedCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::game::bff::CallDataMap* /*request*/, ::game::bff::CallDataMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::bff::CallDataMap,::game::bff::CallDataMap>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ResetServer<WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_UnRegisterService<WithStreamedUnaryMethod_GetServiceInfo<WithStreamedUnaryMethod_SetServiceInfo<WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetSimenvConfig<WithStreamedUnaryMethod_SetSimenvConfig<WithStreamedUnaryMethod_SimControl<WithStreamedUnaryMethod_SimMonitor<WithStreamedUnaryMethod_GetAgentConfig<WithStreamedUnaryMethod_SetAgentConfig<WithStreamedUnaryMethod_GetAgentMode<WithStreamedUnaryMethod_SetAgentMode<WithStreamedUnaryMethod_GetModelWeights<WithStreamedUnaryMethod_SetModelWeights<WithStreamedUnaryMethod_GetModelBuffer<WithStreamedUnaryMethod_SetModelBuffer<WithStreamedUnaryMethod_GetModelStatus<WithStreamedUnaryMethod_SetModelStatus<WithStreamedUnaryMethod_Call<Service > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ResetServer<WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_UnRegisterService<WithStreamedUnaryMethod_GetServiceInfo<WithStreamedUnaryMethod_SetServiceInfo<WithStreamedUnaryMethod_ResetService<WithStreamedUnaryMethod_QueryService<WithStreamedUnaryMethod_GetSimenvConfig<WithStreamedUnaryMethod_SetSimenvConfig<WithStreamedUnaryMethod_SimControl<WithStreamedUnaryMethod_SimMonitor<WithStreamedUnaryMethod_GetAgentConfig<WithStreamedUnaryMethod_SetAgentConfig<WithStreamedUnaryMethod_GetAgentMode<WithStreamedUnaryMethod_SetAgentMode<WithStreamedUnaryMethod_GetModelWeights<WithStreamedUnaryMethod_SetModelWeights<WithStreamedUnaryMethod_GetModelBuffer<WithStreamedUnaryMethod_SetModelBuffer<WithStreamedUnaryMethod_GetModelStatus<WithStreamedUnaryMethod_SetModelStatus<WithStreamedUnaryMethod_Call<Service > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace bff
}  // namespace game


#endif  // GRPC_bff_2eproto__INCLUDED
