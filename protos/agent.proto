syntax = "proto3";

package game.agent;

import "protos/types.proto";

service Agent {
  // 重置智能服务
  rpc ResetService(types.CommonRequest) returns (types.CommonResponse);
  // 查询智能服务
  rpc QueryService(types.CommonRequest) returns (types.ServiceState);

  // 获取智能体配置
  rpc GetAgentConfig(types.CommonRequest) returns (AgentConfig);
  // 设置智能体配置
  rpc SetAgentConfig(AgentConfig) returns (types.CommonResponse);

  // 获取智能体模式
  rpc GetAgentMode(types.CommonRequest) returns (AgentMode);
  // 设置智能体模式
  rpc SetAgentMode(AgentMode) returns (types.CommonResponse);

  // 获取模型权重
  rpc GetModelWeights(types.CommonRequest) returns (ModelWeights);
  // 设置模型权重
  rpc SetModelWeights(ModelWeights) returns (types.CommonResponse);

  // 获取模型经验
  rpc GetModelBuffer(types.CommonRequest) returns (ModelBuffer);
  // 设置模型经验
  rpc SetModelBuffer(ModelBuffer) returns (types.CommonResponse);

  // 获取模型状态
  rpc GetModelStatus(types.CommonRequest) returns (ModelStatus);
  // 设置模型状态
  rpc SetModelStatus(ModelStatus) returns (types.CommonResponse);

  // 获取决策动作
  rpc GetAction(stream types.SimState) returns (stream types.SimAction);
}

message AgentConfig {
  bool training = 1;                // 是否为训练模式
  string states_inputs_func = 2;    // 状态到输入预处理函数
  string outputs_actions_func = 3;  // 输出到动作后处理函数
  string reward_func = 4;           // 奖励函数
  string type = 5;                  // 模型类型
  string hypers = 6;                // 超参数，格式：Json字符串
  string builder = 7;               // 模型构建函数代码
  string structures = 8;            // 网络结构，格式：Json字符串
}

message AgentMode {
  bool training = 1;  // 是否为训练模式
}

message ModelWeights {
  bytes weights = 1;  // 模型权重，格式：Pickle字节流
}

message ModelBuffer {
  bytes buffer = 1;  // 经验数据，格式：Pickle字节流
}

message ModelStatus {
  string status = 1;  // 模型状态，格式：Json字符串
}
