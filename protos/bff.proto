syntax = "proto3";

package game.bff;

import "protos/types.proto";
import "protos/agent.proto";

service BFF {
  // 重置BFF服务
  rpc ResetServer(types.CommonRequest) returns (types.CommonResponse);

  // 注册服务
  rpc RegisterService(ServiceInfoList) returns (ServiceIdList);
  // 注销服务
  rpc UnRegisterService(ServiceIdList) returns (types.CommonResponse);

  // 获取服务信息
  rpc GetServiceInfo(ServiceIdList) returns (ServiceInfoMap);
  // 设置服务信息
  rpc SetServiceInfo(ServiceInfoMap) returns (types.CommonResponse);

  // 获取数据配置
  rpc GetDataConfig(types.CommonRequest) returns (DataConfig);
  // 设置数据配置
  rpc SetDataConfig(DataConfig) returns (types.CommonResponse);

  // 智能代理流式通信
  rpc ProxyChat(stream types.JsonString) returns (stream types.JsonString);

  // 获取路由配置
  rpc GetRouteConfig(types.CommonRequest) returns (RouteConfig);
  // 设置路由配置
  rpc SetRouteConfig(RouteConfig) returns (types.CommonResponse);

  // 控制仿真流程
  rpc SimControl(SimCmd) returns (types.CommonResponse);

  // 获取仿真信息
  rpc SimMonitor(types.CommonRequest) returns (SimInfo);

  // 获取智能体配置
  rpc GetAgentConfig(ServiceIdList) returns (AgentConfigMap);
  // 设置智能体配置
  rpc SetAgentConfig(AgentConfigMap) returns (types.CommonResponse);

  // 设置智能体模式
  rpc GetAgentMode(ServiceIdList) returns (AgentModeMap);
  // 设置智能体模式
  rpc SetAgentMode(AgentModeMap) returns (types.CommonResponse);

  // 获取智能体权重
  rpc GetAgentWeight(ServiceIdList) returns (AgentWeightMap);
  // 设置智能体权重
  rpc SetAgentWeight(AgentWeightMap) returns (types.CommonResponse);

  // 获取智能体经验池
  rpc GetAgentBuffer(ServiceIdList) returns (AgentBufferMap);
  // 设置智能体经验池
  rpc SetAgentBuffer(AgentBufferMap) returns (types.CommonResponse);

  // 获取智能体状态
  rpc GetAgentStatus(ServiceIdList) returns (AgentStatusMap);
  // 设置智能体状态
  rpc SetAgentStatus(AgentStatusMap) returns (types.CommonResponse);
}

enum ServiceType {
  SIMENV = 0;  // 仿真服务
  AGENT = 1;   // 智能服务
}
message ServiceInfo {
  ServiceType type = 1;  // 服务类型
  string subtype = 2;    // 服务子类型
  string name = 3;       // 服务名称
  string ip = 4;         // 服务ip
  uint32 port = 5;       // 服务端口
  string desc = 6;       // 服务描述
  string params = 7;     // 服务参数，格式：Json字符串
}
message ServiceIdList {
  repeated string ids = 1;  // 服务id列表
}
message ServiceInfoList {
  repeated ServiceInfo services = 1;  // 服务信息列表
}
message ServiceInfoMap {
  map<string, ServiceInfo> services = 1;  // <服务id,服务信息>
}

message DataConfig {
  message Param {
    string name = 1;   // 参数名称
    string type = 2;   // 参数类型
    string value = 3;  // 参数初始值
  }
  message Model {
    string name = 1;                       // 模型名称
    map<string, Param> input_params = 2;   // <参数标识,输入参数>
    map<string, Param> output_params = 3;  // <参数标识,输出参数>
  }
  map<string, Model> data = 1;  // <模型类型,模型数据>
}

message RouteConfig {
  message Config {
    string name = 1;             // 配置名称
    repeated string models = 2;  // 模型类型列表
  }
  message Route {
    string name = 1;                  // 路由名称
    map<string, Config> configs = 2;  // <智能服务id,智能服务路由>
  }
  map<string, Route> routes = 1;  // <仿真服务id,仿真服务路由>
  string sim_done_func = 2;       // 仿真结束判断函数
  uint32 sim_step_ratio = 3;      // 仿真步数比
}

message SimCmd {
  enum Type {
    INIT = 0;    // 初始化
    START = 1;   // 开始
    PAUSE = 2;   // 暂停
    STEP = 3;    // 步进
    RESUME = 4;  // 继续
    STOP = 5;    // 停止
    DONE = 6;    // 单局结束
    PARAM = 7;   // 设置参数
  }
  Type cmd = 1;                              // 仿真命令
  map<string, types.JsonString> params = 2;  // <仿真服务id,仿真服务参数>
}

message SimInfo {
  enum State {
    UNINITED = 0;   // 未初始化
    STOPPED = 1;    // 已停止
    RUNNING = 2;    // 正在运行
    SUSPENDED = 3;  // 已挂起
  }
  State state = 1;                         // 仿真状态
  map<string, types.JsonString> data = 2;  // <仿真服务id,仿真服务数据>
  map<string, types.JsonString> logs = 3;  // <仿真服务id,仿真服务日志>
}

message AgentConfigMap {
  map<string, agent.AgentConfig> configs = 1;  // <智能服务id,智能服务配置>
}
message AgentModeMap {
  map<string, agent.AgentMode> modes = 1;  // <智能服务id,智能服务模式>
}
message AgentWeightMap {
  map<string, agent.AgentWeight> weights = 1;  // <智能服务id,智能服务权重>
}
message AgentBufferMap {
  map<string, agent.AgentBuffer> buffers = 1;  // <智能服务id,智能服务经验>
}
message AgentStatusMap {
  map<string, agent.AgentStatus> status = 1;  // <智能服务id,智能服务状态>
}
