syntax = "proto3";

package game.bff;

import "protos/types.proto";
import "protos/agent.proto";
import "protos/simenv.proto";

service BFF {
  // 重置BFF服务器
  rpc ResetServer(types.CommonRequest) returns (types.CommonResponse);

  // 注册服务
  rpc RegisterService(ServiceInfoList) returns (ServiceIdList);
  // 注销服务
  rpc UnRegisterService(ServiceIdList) returns (types.CommonResponse);

  // 获取服务信息
  rpc GetServiceInfo(ServiceIdList) returns (ServiceInfoMap);
  // 设置服务信息
  rpc SetServiceInfo(ServiceInfoMap) returns (types.CommonResponse);

  // 获取数据配置
  rpc GetDataConfig(types.CommonRequest) returns (DataConfig);
  // 设置数据配置
  rpc SetDataConfig(DataConfig) returns (types.CommonResponse);

  // 获取路由配置
  rpc GetRouteConfig(types.CommonRequest) returns (RouteConfig);
  // 设置路由配置
  rpc SetRouteConfig(RouteConfig) returns (types.CommonResponse);

  // 智能代理流式通信
  rpc ProxyChat(stream types.JsonString) returns (stream types.JsonString);

  // 重置服务
  rpc ResetService(ServiceIdList) returns (types.CommonResponse);
  // 查询服务
  rpc QueryService(ServiceIdList) returns (ServiceStateMap);

  // 获取智能体配置
  rpc GetAgentConfig(ServiceIdList) returns (AgentConfigMap);
  // 设置智能体配置
  rpc SetAgentConfig(AgentConfigMap) returns (types.CommonResponse);

  // 设置智能体模式
  rpc GetAgentMode(ServiceIdList) returns (AgentModeMap);
  // 设置智能体模式
  rpc SetAgentMode(AgentModeMap) returns (types.CommonResponse);

  // 获取模型权重
  rpc GetModelWeights(ServiceIdList) returns (ModelWeightsMap);
  // 设置模型权重
  rpc SetModelWeights(ModelWeightsMap) returns (types.CommonResponse);

  // 获取模型经验
  rpc GetModelBuffer(ServiceIdList) returns (ModelBufferMap);
  // 设置模型经验
  rpc SetModelBuffer(ModelBufferMap) returns (types.CommonResponse);

  // 获取模型状态
  rpc GetModelStatus(ServiceIdList) returns (ModelStatusMap);
  // 设置模型状态
  rpc SetModelStatus(ModelStatusMap) returns (types.CommonResponse);

  // 获取仿真环境配置
  rpc GetSimenvConfig(ServiceIdList) returns (SimenvConfigMap);
  // 设置仿真环境配置
  rpc SetSimenvConfig(SimenvConfigMap) returns (types.CommonResponse);

  // 控制仿真流程
  rpc SimControl(SimCmdMap) returns (types.CommonResponse);

  // 获取仿真信息
  rpc SimMonitor(ServiceIdList) returns (SimInfoMap);
}

message ServiceInfo {
  enum Type {
    AGENT = 0;   // 智能服务
    SIMENV = 1;  // 仿真服务
  }
  Type type = 1;    // 服务类型
  string name = 2;  // 服务名称
  string ip = 3;    // 服务ip
  uint32 port = 4;  // 服务端口
  string desc = 5;  // 服务描述
}
message ServiceIdList {
  repeated string ids = 1;  // 服务id列表
}
message ServiceInfoList {
  repeated ServiceInfo services = 1;  // 服务信息列表
}
message ServiceInfoMap {
  map<string, ServiceInfo> services = 1;  // <服务id,服务信息>
}

message DataConfig {
  message Type {
    map<string, string> fields = 1;  // <字段名称,字段类型>
  }
  message Param {
    string type = 1;   // 参数类型
    string value = 2;  // 参数初始值，格式：Json字符串
  }
  message Model {
    map<string, Param> input_params = 1;   // <参数名称,参数信息>
    map<string, Param> output_params = 2;  // <参数名称,参数信息>
  }
  map<string, Type> types = 1;  // <类型名称,类型结构>
  map<string, Model> data = 2;  // <模型名称,模型参数>
}

message RouteConfig {
  message Config {
    repeated string models = 1;  // 模型名称列表
  }
  message Route {
    map<string, Config> configs = 1;  // <智能服务id,智能服务路由>
  }
  map<string, Route> routes = 1;  // <仿真服务id,仿真服务路由>
  string sim_term_func = 2;       // 仿真结束判断函数
  uint32 sim_step_ratio = 3;      // 仿真步数比
}

message ServiceStateMap {
  map<string, types.ServiceState> states = 1;  // <服务id,服务状态>
}

message AgentConfigMap {
  map<string, agent.AgentConfig> configs = 1;  // <智能服务id,智能服务配置>
}
message AgentModeMap {
  map<string, agent.AgentMode> modes = 1;  // <智能服务id,智能服务模式>
}
message ModelWeightsMap {
  map<string, agent.ModelWeights> weights = 1;  // <智能服务id,模型权重>
}
message ModelBufferMap {
  map<string, agent.ModelBuffer> buffers = 1;  // <智能服务id,模型经验>
}
message ModelStatusMap {
  map<string, agent.ModelStatus> status = 1;  // <智能服务id,模型状态>
}

message SimenvConfigMap {
  map<string, simenv.SimenvConfig> configs = 1;  // <仿真服务id,仿真服务配置>
}
message SimCmdMap {
  map<string, simenv.SimCmd> cmds = 1;  // <仿真服务id,仿真命令>
}
message SimInfoMap {
  map<string, simenv.SimInfo> infos = 1;  // <仿真服务id,仿真信息>
}
